package com.ruoyi.system.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
<<<<<<< HEAD
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple11;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
=======
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple12;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
>>>>>>> ceece8c (实现多选删除功能)
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MedicalPlatform extends Contract {
<<<<<<< HEAD
    public static final String[] BINARY_ARRAY = {"","","","",""};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","",""};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"getSickAppointment(uint256,address)\",\"name\":\"getSickAppointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"appointments(uint256)\",\"name\":\"appointments\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isCompleted\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"updateAppointment(uint256,string,address,string,address,string,string,string,uint256)\",\"name\":\"updateAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isMedicalRecordFilled(uint256)\",\"name\":\"isMedicalRecordFilled\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"updateMedicalRecord(uint256,string,address,string,address,string,string,string,string,string,uint256)\",\"name\":\"updateMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"completeAppointment(uint256)\",\"name\":\"completeAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"deleteAppointment(uint256)\",\"name\":\"deleteAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getMedicalRecordList(address)\",\"name\":\"getMedicalRecordList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"deleteMedicalRecord(uint256)\",\"name\":\"deleteMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"medicalRecords(uint256)\",\"name\":\"medicalRecords\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":fals","e,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"register(string,string,uint256,uint8,address)\",\"name\":\"register\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isCompletedApoointment(uint256)\",\"name\":\"isCompletedApoointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"createAppointment(string,address,string,address,string,string,string,uint256)\",\"name\":\"createAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getMedicalRecord(uint256,address)\",\"name\":\"getMedicalRecord\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"createMedicalRecord(string,address,string,address,string,string,string,string,string,uint256)\",\"name\":\"createMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"users(address)\",\"name\":\"users\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"userType\",\"type\":\"","uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}]},{\"methodSignatureAsString\":\"completeMedicalRecord(uint256)\",\"name\":\"completeMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getAppointmentsList(address)\",\"name\":\"getAppointmentsList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"accessPermissions(address,uint256)\",\"name\":\"accessPermissions\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"UserRegistered(address,uint8)\",\"name\":\"UserRegistered\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AppointmentCreated(uint256,address,address)\",\"name\":\"AppointmentCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"RecordCreated(uint256,address,address)\",\"name\":\"RecordCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AccessGranted(address,address,uint256)\",\"name\":\"AccessGranted\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETSICKAPPOINTMENT = "getSickAppointment";

    public static final String FUNC_APPOINTMENTS = "appointments";

    public static final String FUNC_UPDATEAPPOINTMENT = "updateAppointment";

    public static final String FUNC_ISMEDICALRECORDFILLED = "isMedicalRecordFilled";

    public static final String FUNC_UPDATEMEDICALRECORD = "updateMedicalRecord";
=======
    public static final String[] BINARY_ARRAY = {"608060405260016005556001600655600160075534801561001f57600080fd5b5061533b8061002f6000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312dc90131461015957806318a231a91461019f5780631c1a9f7b146101ce5780632fa933cd1461021057806331718d9e14610256578063365b98b21461029c5780634095b117146102df578063469318151461030857806353e4612e14610331578063601bb41d1461035a5780636492246d14610386578063671f323f146103c3578063691c0a57146103ec57806369f3d340146104155780637564a13c146104525780637ed7747d1461049a5780638abd74e8146104d75780638c3a246914610500578063a4378ef41461053d578063a879b36e1461057a578063bc2a8a5a146105a3578063bd44719e146105cc578063cf21aff314610609578063d731f07f14610632578063db1ef71f1461065e578063f0d950901461069b575b600080fd5b34801561016557600080fd5b50610180600480360361017b9190810190614522565b6106ca565b6040516101969a99989796959493929190614fcd565b60405180910390f35b3480156101ab57600080fd5b506101b4610a23565b6040516101c5959493929190614b8f565b60405180910390f35b3480156101da57600080fd5b506101f560048036036101f09190810190614522565b610e0c565b60405161020796959493929190614c20565b60405180910390f35b34801561021c57600080fd5b50610237600480360361023291908101906147df565b61105e565b60405161024d9a99989796959493929190614d91565b60405180910390f35b34801561026257600080fd5b5061027d600480360361027891908101906147df565b6116fa565b6040516102939a999897969594939291906150b5565b60405180910390f35b3480156102a857600080fd5b506102c360048036036102be9190810190614522565b611c4a565b6040516102d69796959493929190614e5e565b60405180910390f35b3480156102eb57600080fd5b5061030660048036036103019190810190614522565b611e81565b005b34801561031457600080fd5b5061032f600480360361032a9190810190614522565b611efe565b005b34801561033d57600080fd5b5061035860048036036103539190810190614720565b611ff7565b005b34801561036657600080fd5b5061036f6120d9565b60405161037d929190614b58565b60405180910390f35b34801561039257600080fd5b506103ad60048036036103a89190810190614522565b612280565b6040516103ba9190614b36565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036036103e59190810190614661565b6122ed565b005b3480156103f857600080fd5b50610413600480360361040e9190810190614522565b612360565b005b34801561042157600080fd5b5061043c60048036036104379190810190614522565b612479565b6040516104499190614b36565b60405180910390f35b34801561045e57600080fd5b5061047960048036036104749190810190614522565b6124e6565b6040516104919c9b9a99989796959493929190614ee2565b60405180910390f35b3480156104a657600080fd5b506104c160048036036104bc9190810190614522565b61297b565b6040516104ce9190614c05565b60405180910390f35b3480156104e357600080fd5b506104fe60048036036104f99190810190614362565b6129a8565b005b34801561050c57600080fd5b5061052760048036036105229190810190614522565b612dfb565b6040516105349190614c05565b60405180910390f35b34801561054957600080fd5b50610564600480360361055f9190810190614463565b612e28565b6040516105719190614d76565b60405180910390f35b34801561058657600080fd5b506105a1600480360361059c9190810190614522565b6131a0565b005b3480156105af57600080fd5b506105ca60048036036105c59190810190614208565b613223565b005b3480156105d857600080fd5b506105f360048036036105ee91908101906147df565b6136c0565b6040516106009190614c05565b60405180910390f35b34801561061557600080fd5b50610630600480360361062b919081019061454b565b6136ef565b005b34801561063e57600080fd5b50610647613796565b604051610655929190614b58565b60405180910390f35b34801561066a57600080fd5b50610685600480360361068091908101906141c7565b61393d565b6040516106929190614d76565b60405180910390f35b3480156106a757600080fd5b506106b06139b2565b6040516106c1959493929190614b8f565b60405180910390f35b6002602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561077c5780601f106107515761010080835404028352916020019161077c565b820191906000526020600020905b81548152906001019060200180831161075f57829003601f168201915b505050505090806002015490806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505090806004015490806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108c45780601f10610899576101008083540402835291602001916108c4565b820191906000526020600020905b8154815290600101906020018083116108a757829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109625780601f1061093757610100808354040283529160200191610962565b820191906000526020600020905b81548152906001019060200180831161094557829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b5050505050908060080154908060090160009054906101000a900460ff1690508a565b6060806060806060600080600080600880549050935083604051908082528060200260200182016040528015610a685781602001602082028038833980820191505090505b50985083604051908082528060200260200182016040528015610a9f57816020015b6060815260200190600190039081610a8a5790505b50975083604051908082528060200260200182016040528015610ad657816020015b6060815260200190600190039081610ac15790505b50965083604051908082528060200260200182016040528015610b085781602001602082028038833980820191505090505b50955083604051908082528060200260200182016040528015610b3f57816020015b6060815260200190600190039081610b2a5790505b509450600092505b83831015610df257600883815481101515610b5e57fe5b906000526020600020015491506000808381526020019081526020016000209050818984815181101515610b8e57fe5b9060200190602002018181525050806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b50505050508884815181101515610c4757fe5b90602001906020020181905250806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cec5780601f10610cc157610100808354040283529160200191610cec565b820191906000526020600020905b815481529060010190602001808311610ccf57829003601f168201915b50505050508784815181101515610cff57fe5b9060200190602002018190525080600301548684815181101515610d1f57fe5b9060200190602002018181525050806007018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dc55780601f10610d9a57610100808354040283529160200191610dc5565b820191906000526020600020905b815481529060010190602001808311610da857829003601f168201915b50505050508584815181101515610dd857fe5b906020019060200201819052508280600101935050610b47565b888888888898509850985098509850505050509091929394565b6060806000806000606060008060008981526020019081526020016000209050806001018160020182600301548360040160009054906101000a900460ff168460040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600701858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f095780601f10610ede57610100808354040283529160200191610f09565b820191906000526020600020905b815481529060010190602001808311610eec57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fa55780601f10610f7a57610100808354040283529160200191610fa5565b820191906000526020600020905b815481529060010190602001808311610f8857829003601f168201915b50505050509450808054600181600116156101000203166002900480601f01602080910402602001604051","","","60c0820151816005019080519060200190612fec9291906140ab565b5060e08201518160060190805190602001906130099291906140ab565b5061010082015181600701908051906020019061302792919061402b565b509050506001600281111561303857fe5b60008083815260200190815260200160002060040160009054906101000a900460ff16600281111561306657fe5b141561309d5760088190806001815401808255809150509060018203906000526020600020016000909192909190915055506130e9565b6002808111156130a957fe5b8460028111156130b557fe5b14156130e85760098190806001815401808255809150509060018203906000526020600020016000909192909190915055505b5b806001886040518082805190602001908083835b60208310151561312257805182526020820191506020810190506020830392506130fd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550807f3ffb8eddbb3b099236f435a154ca411d6165e447fd22eb2194489ad5a6a2429f338660405161318b929190614b0d565b60405180910390a28091505095945050505050565b60006003600083815260200190815260200160002090506131c08261297b565b151515613202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f990614cb6565b60405180910390fd5b600181600b0160006101000a81548160ff0219169083151502179055505050565b60008060008060018c6040518082805190602001908083835b602083101515613261578051825260208201915060208101905060208303925061323c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054141515156132d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132cf90614cf6565b60405180910390fd5b600060018b6040518082805190602001908083835b60208310151561331257805182526020820191506020810190506020830392506132ed565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205414151515613389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338090614d16565b60405180910390fd5b60018b6040518082805190602001908083835b6020831015156133c1578051825260208201915060208101905060208303925061339c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054925060018a6040518082805190602001908083835b60208310151561342f578051825260208201915060208101905060208303925061340a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054915060076000815480929190600101919050559050610180604051908101604052808281526020018c81526020018481526020018b81526020018381526020018a8152602001898152602001888152602001878152602001868152602001858152602001600015158152506003600083815260200190815260200160002060008201518160000155602082015181600101908051906020019061350792919061402b565b5060408201518160020155606082015181600301908051906020019061352e92919061402b565b506080820151816004015560a082015181600501908051906020019061355592919061402b565b5060c082015181600601908051906020019061357292919061402b565b5060e082015181600701908051906020019061358f92919061402b565b506101008201518160080190805190602001906135ad92919061402b565b506101208201518160090190805190602001906135cb92919061402b565b5061014082015181600a015561016082015181600b0160006101000a81548160ff021916908315150217905550905050600080848152602001908152602001600020600601819080600181540180825580915050906001820390600052602060002001600090919290919091505550600080838152602001908152602001600020600601819080600181540180825580915050906001820390600052602060002001600090919290919091505550807f7b7a635353af1f2c528814b22cf03a8a29cd07ec7fc3f991f5d9382396120b9784846040516136ab92919061508c565b60405180910390a25050505050505050505050565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60006003600089815260200190815260200160002090508681600501908051906020019061371e929190613fab565b5085816006019080519060200190613737929190613fab565b5084816007019080519060200190613750929190613fab565b5083816008019080519060200190613769929190613fab565b5082816009019080519060200190613782929190613fab565b508181600a01819055505050505050505050565b6060806000806000806008805490509350836040519080825280602002602001820160405280156137d65781602001602082028038833980820191505090505b5095508360405190808252806020026020018201604052801561380d57816020015b60608152602001906001900390816137f85790505b509450600092505b8383101561392f5760088381548110151561382c57fe5b90600052602060002001549150600080838152602001908152602001600020905081868481518110151561385c57fe5b9060200190602002018181525050806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139025780601f106138d757610100808354040283529160200191613902565b820191906000526020600020905b8154815290600101906020018083116138e557829003601f168201915b5050505050858481518110151561391557fe5b906020019060200201819052508280600101935050613815565b858595509550505050509091565b60006001826040518082805190602001908083835b6020831015156139775780518252602082019150602081019050602083039250613952565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b60608060608060606000806000806009805490509350836040519080825280602002602001820160405280156139f75781602001602082028038833980820191505090505b50985083604051908082528060200260200182016040528015613a2e57816020015b6060815260200190600190039081613a195790505b50975083604051908082528060200260200182016040528015613a6557816020015b6060815260200190600190039081613a505790505b50965083604051908082528060200260200182016040528015613a975781602001602082028038833980820191505090505b50955083604051908082528060200260200182016040528015613ace57816020015b6060815260200190600190039081613ab95790505b509450600092505b83831015613d8157600983815481101515613aed57fe5b906000526020600020015491506000808381526020019081526020016000209050818984815181101515613b1d57fe5b9060200190602002018181525050806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613bc35780601f10613b9857610100808354040283529160200191613bc3565b820191906000526020600020905b815481529060010190602001808311613ba657829003601f168201915b50505050508884815181101515613bd657fe5b90602001906020020181905250806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c7b5780601f10613c5057610100808354040283529160200191613c7b565b820191906000526020600020905b815481529060010190602001808311613c5e57829003601f168201915b50505050508784815181101515613c8e57fe5b9060200190602002018190525080600301548684815181101515613cae57fe5b9060200190602002018181525050806007018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d545780601f10613d2957610100808354040283529160200191613d54565b820191906000526020600020905b815481529060010190602001808311613d3757829003601f168201915b50505050508584815181101515613d6757fe5b906020019060200201819052508280600101935050613ad6565b888888888898509850985098509850505050509091929394565b600080600084805490509250600091505b8480549050821015613ded57838583815481101515613dc757fe5b90600052602060002001541415613de057819250613ded565b8180600101925050613dac565b848054905083101515613e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e2c90614d56565b60405180910390fd5b8290505b6001858054905003811015613e8d578460018201815481101515613e5957fe5b90600052602060002001548582815481101515613e7257fe5b90600052602060002001819055508080600101915050613e39565b84805480919060019003613ea191906140f8565b505050505050565b6101806040519081016040528060008152602001606081526020016000815260200160608152602001600081526020016060815260200160608152602001606081526020016060815260200160608152602001600081526020016000151581525090565b610140604051908101604052806000815260200160608152602001600081526020016060815260200160008152602001606081526020016060815260200160608152602001600081526020016000151581525090565b50805460018160011615610100020316600290046000825580601f10613f895750613fa8565b601f016020900490600052602060002090810190613fa79190614124565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004","","014082019050614fe3600083018d614afe565b8181036020830152614ff5818c614947565b9050615004604083018b614afe565b8181036060830152615016818a614947565b90506150256080830189614afe565b81810360a08301526150378188614947565b905081810360c083015261504b8187614947565b905081810360e083015261505f8186614947565b905061506f610100830185614afe565b61507d6101208301846148f3565b9b9a5050505050505050505050565b60006040820190506150a16000830185614afe565b6150ae6020830184614afe565b9392505050565b6000610140820190506150cb600083018d614afe565b6150d8602083018c614afe565b81810360408301526150ea818b614911565b90506150f9606083018a614afe565b818103608083015261510b8189614911565b905081810360a083015261511f8188614911565b905081810360c08301526151338187614911565b905081810360e08301526151478186614911565b9050615157610100830185614afe565b6151656101208301846148f3565b9b9a5050505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561519757600080fd5b8060405250919050565b600067ffffffffffffffff8211156151b857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b600060038210151561526757fe5b819050919050565b6000819050919050565b600060038210151561528a57600080fd5b819050919050565b6000819050919050565b60006152a782615259565b9050919050565b82818337600083830152505050565b60005b838110156152db5780820151818401526020810190506152c0565b838111156152ea576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582098241a0f204ca2bb73a8e606469b622d76ecab7770b0712300ee299f4ca8aca26c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","","014082019050614fe3600083018d614afe565b8181036020830152614ff5818c614947565b9050615004604083018b614afe565b8181036060830152615016818a614947565b90506150256080830189614afe565b81810360a08301526150378188614947565b905081810360c083015261504b8187614947565b905081810360e083015261505f8186614947565b905061506f610100830185614afe565b61507d6101208301846148f3565b9b9a5050505050505050505050565b60006040820190506150a16000830185614afe565b6150ae6020830184614afe565b9392505050565b6000610140820190506150cb600083018d614afe565b6150d8602083018c614afe565b81810360408301526150ea818b614911565b90506150f9606083018a614afe565b818103608083015261510b8189614911565b905081810360a083015261511f8188614911565b905081810360c08301526151338187614911565b905081810360e08301526151478186614911565b9050615157610100830185614afe565b6151656101208301846148f3565b9b9a5050505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561519757600080fd5b8060405250919050565b600067ffffffffffffffff8211156151b857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b600060038210151561526757fe5b819050919050565b6000819050919050565b600060038210151561528a57600080fd5b819050919050565b6000819050919050565b60006152a782615259565b9050919050565b82818337600083830152505050565b60005b838110156152db5780820151818401526020810190506152c0565b838111156152ea576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582098241a0f204ca2bb73a8e606469b622d76ecab7770b0712300ee299f4ca8aca26c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"appointments(uint256)\",\"name\":\"appointments\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patientId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isCompleted\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"getAllPatients()\",\"name\":\"getAllPatients\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"},{\"name\":\"names\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"},{\"name\":\"genders\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"},{\"name\":\"ages\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"},{\"name\":\"Emails\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"}]},{\"methodSignatureAsString\":\"getUserDetails(uint256)\",\"name\":\"getUserDetails\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"email\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"getMedicalRecord(uint256,uint256)\",\"name\":\"getMedicalRecord\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"Id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"getSickAppointment(uint256,uint256)\",\"name\":\"getSickAppointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"Id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isCompleted\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"users(uint256)\",\"name\":\"users\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"Email\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"completeAppointment(uint256)\",\"name\":\"completeAppointment\",\"typ","e\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"deleteAppointment(uint256)\",\"name\":\"deleteAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"updateUser(uint256,string,string,uint256,string)\",\"name\":\"updateUser\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"Email\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getAllDoctorsName()\",\"name\":\"getAllDoctorsName\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"},{\"name\":\"names\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"}]},{\"methodSignatureAsString\":\"getMedicalRecordList(uint256)\",\"name\":\"getMedicalRecordList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"Id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"updateAppointment(uint256,string,string,string,uint256)\",\"name\":\"updateAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"deleteMedicalRecord(uint256)\",\"name\":\"deleteMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getAppointmentsList(uint256)\",\"name\":\"getAppointmentsList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"Id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"medicalRecords(uint256)\",\"name\":\"medicalRecords\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patientId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"iscompleteMedicalRecord(uint256)\",\"name\":\"iscompleteMedicalRecord\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"RecordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"createAppointment(string,string,string,string,string,uint256)\",\"name\":\"createAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isCompletedApoointment(uint256)\",\"name\":\"isCompletedApoointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"register(string,string,uint256,uint8,string)\",\"name\":\"register\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\"",":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"_Email\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"completeMedicalRecord(uint256)\",\"name\":\"completeMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"createMedicalRecord(string,string,string,string,string,string,string,uint256)\",\"name\":\"createMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"accessPermissions(uint256,uint256)\",\"name\":\"accessPermissions\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"updateMedicalRecord(uint256,string,string,string,string,string,uint256)\",\"name\":\"updateMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getAllPatientssName()\",\"name\":\"getAllPatientssName\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"},{\"name\":\"names\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"}]},{\"methodSignatureAsString\":\"getUserId(string)\",\"name\":\"getUserId\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"getAllDoctors()\",\"name\":\"getAllDoctors\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"},{\"name\":\"names\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"},{\"name\":\"genders\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"},{\"name\":\"ages\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"},{\"name\":\"Emails\",\"type\":\"string[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string[]\"}]},{\"methodSignatureAsString\":\"UserRegistered(uint256,address,uint8)\",\"name\":\"UserRegistered\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AppointmentCreated(uint256,uint256,uint256)\",\"name\":\"AppointmentCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"RecordCreated(uint256,uint256,uint256)\",\"name\":\"RecordCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AccessGranted(uint256,uint256,uint256)\",\"name\":\"AccessGranted\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"patientId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_APPOINTMENTS = "appointments";

    public static final String FUNC_GETALLPATIENTS = "getAllPatients";

    public static final String FUNC_GETUSERDETAILS = "getUserDetails";

    public static final String FUNC_GETMEDICALRECORD = "getMedicalRecord";

    public static final String FUNC_GETSICKAPPOINTMENT = "getSickAppointment";

    public static final String FUNC_USERS = "users";
>>>>>>> ceece8c (实现多选删除功能)

    public static final String FUNC_COMPLETEAPPOINTMENT = "completeAppointment";

    public static final String FUNC_DELETEAPPOINTMENT = "deleteAppointment";

<<<<<<< HEAD
    public static final String FUNC_GETMEDICALRECORDLIST = "getMedicalRecordList";

    public static final String FUNC_DELETEMEDICALRECORD = "deleteMedicalRecord";

    public static final String FUNC_MEDICALRECORDS = "medicalRecords";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_ISCOMPLETEDAPOOINTMENT = "isCompletedApoointment";

    public static final String FUNC_CREATEAPPOINTMENT = "createAppointment";

    public static final String FUNC_GETMEDICALRECORD = "getMedicalRecord";

    public static final String FUNC_CREATEMEDICALRECORD = "createMedicalRecord";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_COMPLETEMEDICALRECORD = "completeMedicalRecord";

    public static final String FUNC_GETAPPOINTMENTSLIST = "getAppointmentsList";

    public static final String FUNC_ACCESSPERMISSIONS = "accessPermissions";

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event APPOINTMENTCREATED_EVENT = new Event("AppointmentCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RECORDCREATED_EVENT = new Event("RecordCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ACCESSGRANTED_EVENT = new Event("AccessGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
=======
    public static final String FUNC_UPDATEUSER = "updateUser";

    public static final String FUNC_GETALLDOCTORSNAME = "getAllDoctorsName";

    public static final String FUNC_GETMEDICALRECORDLIST = "getMedicalRecordList";

    public static final String FUNC_UPDATEAPPOINTMENT = "updateAppointment";

    public static final String FUNC_DELETEMEDICALRECORD = "deleteMedicalRecord";

    public static final String FUNC_GETAPPOINTMENTSLIST = "getAppointmentsList";

    public static final String FUNC_MEDICALRECORDS = "medicalRecords";

    public static final String FUNC_ISCOMPLETEMEDICALRECORD = "iscompleteMedicalRecord";

    public static final String FUNC_CREATEAPPOINTMENT = "createAppointment";

    public static final String FUNC_ISCOMPLETEDAPOOINTMENT = "isCompletedApoointment";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_COMPLETEMEDICALRECORD = "completeMedicalRecord";

    public static final String FUNC_CREATEMEDICALRECORD = "createMedicalRecord";

    public static final String FUNC_ACCESSPERMISSIONS = "accessPermissions";

    public static final String FUNC_UPDATEMEDICALRECORD = "updateMedicalRecord";

    public static final String FUNC_GETALLPATIENTSSNAME = "getAllPatientssName";

    public static final String FUNC_GETUSERID = "getUserId";

    public static final String FUNC_GETALLDOCTORS = "getAllDoctors";

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event APPOINTMENTCREATED_EVENT = new Event("AppointmentCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RECORDCREATED_EVENT = new Event("RecordCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ACCESSGRANTED_EVENT = new Event("AccessGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
>>>>>>> ceece8c (实现多选删除功能)
    ;

    protected MedicalPlatform(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

<<<<<<< HEAD
    public Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean> getSickAppointment(BigInteger appointmentId, String _user) throws ContractException {
        final Function function = new Function(FUNC_GETSICKAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (Boolean) results.get(8).getValue());
    }

    public Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean> appointments(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_APPOINTMENTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (Boolean) results.get(8).getValue());
    }

    public TransactionReceipt updateAppointment(BigInteger appointmentId, String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateAppointment(BigInteger appointmentId, String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateAppointment(BigInteger appointmentId, String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<BigInteger, String, String, String, String, String, String, String, BigInteger> getUpdateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<BigInteger, String, String, String, String, String, String, String, BigInteger>(

=======
    public Tuple10<BigInteger, String, BigInteger, String, BigInteger, String, String, String, BigInteger, Boolean> appointments(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_APPOINTMENTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, BigInteger, String, BigInteger, String, String, String, BigInteger, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue(),
                (Boolean) results.get(9).getValue());
    }

    public Tuple5<List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<String>> getAllPatients() throws ContractException {
        final Function function = new Function(FUNC_GETALLPATIENTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public Tuple6<String, String, BigInteger, BigInteger, String, String> getUserDetails(BigInteger userId) throws ContractException {
        final Function function = new Function(FUNC_GETUSERDETAILS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, BigInteger, BigInteger, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue());
    }

    public Tuple10<BigInteger, String, String, String, String, String, String, String, BigInteger, Boolean> getMedicalRecord(BigInteger _recordId, BigInteger Id) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, String, String, String, BigInteger, Boolean>(
>>>>>>> ceece8c (实现多选删除功能)
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
<<<<<<< HEAD
                (BigInteger) results.get(8).getValue()
        );
    }

    public Boolean isMedicalRecordFilled(BigInteger _recordId) throws ContractException {
        final Function function = new Function(FUNC_ISMEDICALRECORDFILLED,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_recordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt updateMedicalRecord(BigInteger recordId, String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateMedicalRecord(BigInteger recordId, String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateMedicalRecord(BigInteger recordId, String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple11<BigInteger, String, String, String, String, String, String, String, String, String, BigInteger> getUpdateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple11<BigInteger, String, String, String, String, String, String, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
=======
                (BigInteger) results.get(8).getValue(),
                (Boolean) results.get(9).getValue());
    }

    public Tuple10<BigInteger, BigInteger, String, BigInteger, String, String, String, String, BigInteger, Boolean> getSickAppointment(BigInteger _appointmentId, BigInteger Id) throws ContractException {
        final Function function = new Function(FUNC_GETSICKAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, BigInteger, String, BigInteger, String, String, String, String, BigInteger, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
>>>>>>> ceece8c (实现多选删除功能)
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
<<<<<<< HEAD
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue(),
                (BigInteger) results.get(10).getValue()
        );
=======
                (BigInteger) results.get(8).getValue(),
                (Boolean) results.get(9).getValue());
    }

    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue());
>>>>>>> ceece8c (实现多选删除功能)
    }

    public TransactionReceipt completeAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] completeAppointment(BigInteger appointmentId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompleteAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCompleteAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt deleteAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteAppointment(BigInteger appointmentId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

<<<<<<< HEAD
    public List getMedicalRecordList(String _user) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORDLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
=======
    public TransactionReceipt updateUser(BigInteger userId, String name, String gender, BigInteger age, String Email) {
        final Function function = new Function(
                FUNC_UPDATEUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(age),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(Email)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateUser(BigInteger userId, String name, String gender, BigInteger age, String Email, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(age),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(Email)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateUser(BigInteger userId, String name, String gender, BigInteger age, String Email) {
        final Function function = new Function(
                FUNC_UPDATEUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(age),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(Email)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, String, String, BigInteger, String> getUpdateUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

    public Tuple2<List<BigInteger>, List<String>> getAllDoctorsName() throws ContractException {
        final Function function = new Function(FUNC_GETALLDOCTORSNAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public List getMedicalRecordList(BigInteger Id) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORDLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Id)),
>>>>>>> ceece8c (实现多选删除功能)
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

<<<<<<< HEAD
=======
    public TransactionReceipt updateAppointment(BigInteger appointmentId, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateAppointment(BigInteger appointmentId, String _hospitalName, String _department, String _remark, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateAppointment(BigInteger appointmentId, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> getUpdateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue()
        );
    }

>>>>>>> ceece8c (实现多选删除功能)
    public TransactionReceipt deleteMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteMedicalRecord(BigInteger recordId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

<<<<<<< HEAD
    public Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean> medicalRecords(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_MEDICALRECORDS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean>(
=======
    public List getAppointmentsList(BigInteger Id) throws ContractException {
        final Function function = new Function(FUNC_GETAPPOINTMENTSLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, String, String, String, BigInteger, Boolean> medicalRecords(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_MEDICALRECORDS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, String, String, String, BigInteger, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue(),
                (BigInteger) results.get(10).getValue(),
                (Boolean) results.get(11).getValue());
    }

    public Boolean iscompleteMedicalRecord(BigInteger RecordId) throws ContractException {
        final Function function = new Function(FUNC_ISCOMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(RecordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt createAppointment(String _patientName, String _doctorName, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createAppointment(String _patientName, String _doctorName, String _hospitalName, String _department, String _remark, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAppointment(String _patientName, String _doctorName, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, BigInteger> getCreateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, BigInteger>(

>>>>>>> ceece8c (实现多选删除功能)
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
<<<<<<< HEAD
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue(),
                (Boolean) results.get(10).getValue());
    }

    public TransactionReceipt register(String _name, String _gender, BigInteger _age, BigInteger _userType, String account) {
=======
                (BigInteger) results.get(5).getValue()
        );
    }

    public Boolean isCompletedApoointment(BigInteger appointmentId) throws ContractException {
        final Function function = new Function(FUNC_ISCOMPLETEDAPOOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt register(String _name, String _gender, BigInteger _age, BigInteger _userType, String _Email) {
>>>>>>> ceece8c (实现多选删除功能)
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_age),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_userType),
<<<<<<< HEAD
                        new org.fisco.bcos.sdk.abi.datatypes.Address(account)),
=======
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_Email)),
>>>>>>> ceece8c (实现多选删除功能)
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

<<<<<<< HEAD
    public byte[] register(String _name, String _gender, BigInteger _age, BigInteger _userType, String account, TransactionCallback callback) {
=======
    public byte[] register(String _name, String _gender, BigInteger _age, BigInteger _userType, String _Email, TransactionCallback callback) {
>>>>>>> ceece8c (实现多选删除功能)
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_age),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_userType),
<<<<<<< HEAD
                        new org.fisco.bcos.sdk.abi.datatypes.Address(account)),
=======
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_Email)),
>>>>>>> ceece8c (实现多选删除功能)
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

<<<<<<< HEAD
    public String getSignedTransactionForRegister(String _name, String _gender, BigInteger _age, BigInteger _userType, String account) {
=======
    public String getSignedTransactionForRegister(String _name, String _gender, BigInteger _age, BigInteger _userType, String _Email) {
>>>>>>> ceece8c (实现多选删除功能)
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_age),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_userType),
<<<<<<< HEAD
                        new org.fisco.bcos.sdk.abi.datatypes.Address(account)),
=======
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_Email)),
>>>>>>> ceece8c (实现多选删除功能)
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER,
                Arrays.<Type>asList(),
<<<<<<< HEAD
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
=======
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
>>>>>>> ceece8c (实现多选删除功能)
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

<<<<<<< HEAD
    public Boolean isCompletedApoointment(BigInteger appointmentId) throws ContractException {
        final Function function = new Function(FUNC_ISCOMPLETEDAPOOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt createAppointment(String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createAppointment(String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAppointment(String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, String, String, String, String, String, BigInteger> getCreateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, String, String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue()
        );
    }

    public Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean> getMedicalRecord(BigInteger _recordId, String _user) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue(),
                (Boolean) results.get(10).getValue());
    }

    public TransactionReceipt createMedicalRecord(String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createMedicalRecord(String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateMedicalRecord(String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple10<String, String, String, String, String, String, String, String, String, BigInteger> getCreateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple10<String, String, String, String, String, String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue()
        );
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> users(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, BigInteger, BigInteger, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue());
    }

=======
    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

>>>>>>> ceece8c (实现多选删除功能)
    public TransactionReceipt completeMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] completeMedicalRecord(BigInteger recordId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompleteMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCompleteMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

<<<<<<< HEAD
    public List getAppointmentsList(String _user) throws ContractException {
        final Function function = new Function(FUNC_GETAPPOINTMENTSLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Boolean accessPermissions(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_ACCESSPERMISSIONS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
=======
    public TransactionReceipt createMedicalRecord(String _patientName, String _doctorName, String _hospitalName, String _department, String _registrationInfo, String _pastMedicalHistory, String _currentMedicalHistory, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createMedicalRecord(String _patientName, String _doctorName, String _hospitalName, String _department, String _registrationInfo, String _pastMedicalHistory, String _currentMedicalHistory, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateMedicalRecord(String _patientName, String _doctorName, String _hospitalName, String _department, String _registrationInfo, String _pastMedicalHistory, String _currentMedicalHistory, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, String, String, String, String, String, BigInteger> getCreateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, String, String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue()
        );
    }

    public Boolean accessPermissions(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_ACCESSPERMISSIONS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0),
>>>>>>> ceece8c (实现多选删除功能)
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

<<<<<<< HEAD
=======
    public TransactionReceipt updateMedicalRecord(BigInteger recordId, String _hospitalName, String _department, String _registrationInfo, String _pastMedicalHistory, String _currentMedicalHistory, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateMedicalRecord(BigInteger recordId, String _hospitalName, String _department, String _registrationInfo, String _pastMedicalHistory, String _currentMedicalHistory, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateMedicalRecord(BigInteger recordId, String _hospitalName, String _department, String _registrationInfo, String _pastMedicalHistory, String _currentMedicalHistory, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, String, String, String, String, BigInteger> getUpdateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, String, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue()
        );
    }

    public Tuple2<List<BigInteger>, List<String>> getAllPatientssName() throws ContractException {
        final Function function = new Function(FUNC_GETALLPATIENTSSNAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public BigInteger getUserId(String name) throws ContractException {
        final Function function = new Function(FUNC_GETUSERID,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple5<List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<String>> getAllDoctors() throws ContractException {
        final Function function = new Function(FUNC_GETALLDOCTORS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

>>>>>>> ceece8c (实现多选删除功能)
    public List<UserRegisteredEventResponse> getUserRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTERED_EVENT, transactionReceipt);
        ArrayList<UserRegisteredEventResponse> responses = new ArrayList<UserRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRegisteredEventResponse typedResponse = new UserRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
<<<<<<< HEAD
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
=======
            typedResponse.userId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
>>>>>>> ceece8c (实现多选删除功能)
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AppointmentCreatedEventResponse> getAppointmentCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPOINTMENTCREATED_EVENT, transactionReceipt);
        ArrayList<AppointmentCreatedEventResponse> responses = new ArrayList<AppointmentCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppointmentCreatedEventResponse typedResponse = new AppointmentCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
<<<<<<< HEAD
            typedResponse.patient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getNonIndexedValues().get(1).getValue();
=======
            typedResponse.patientId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
>>>>>>> ceece8c (实现多选删除功能)
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAppointmentCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPOINTMENTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAppointmentCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPOINTMENTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RecordCreatedEventResponse> getRecordCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDCREATED_EVENT, transactionReceipt);
        ArrayList<RecordCreatedEventResponse> responses = new ArrayList<RecordCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecordCreatedEventResponse typedResponse = new RecordCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
<<<<<<< HEAD
            typedResponse.patient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getNonIndexedValues().get(1).getValue();
=======
            typedResponse.patientId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
>>>>>>> ceece8c (实现多选删除功能)
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRecordCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RECORDCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRecordCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RECORDCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AccessGrantedEventResponse> getAccessGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCESSGRANTED_EVENT, transactionReceipt);
        ArrayList<AccessGrantedEventResponse> responses = new ArrayList<AccessGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccessGrantedEventResponse typedResponse = new AccessGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
<<<<<<< HEAD
            typedResponse.patient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getNonIndexedValues().get(1).getValue();
=======
            typedResponse.patientId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
>>>>>>> ceece8c (实现多选删除功能)
            typedResponse.recordId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAccessGrantedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ACCESSGRANTED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAccessGrantedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ACCESSGRANTED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static MedicalPlatform load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MedicalPlatform(contractAddress, client, credential);
    }

    public static MedicalPlatform deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MedicalPlatform.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class UserRegisteredEventResponse {
        public TransactionReceipt.Logs log;

<<<<<<< HEAD
        public String user;
=======
        public BigInteger userId;

        public String account;
>>>>>>> ceece8c (实现多选删除功能)

        public BigInteger userType;
    }

    public static class AppointmentCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

<<<<<<< HEAD
        public String patient;

        public String doctor;
=======
        public BigInteger patientId;

        public BigInteger doctorId;
>>>>>>> ceece8c (实现多选删除功能)
    }

    public static class RecordCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

<<<<<<< HEAD
        public String patient;

        public String doctor;
=======
        public BigInteger patientId;

        public BigInteger doctorId;
>>>>>>> ceece8c (实现多选删除功能)
    }

    public static class AccessGrantedEventResponse {
        public TransactionReceipt.Logs log;

<<<<<<< HEAD
        public String patient;

        public String doctor;
=======
        public BigInteger patientId;

        public BigInteger doctorId;
>>>>>>> ceece8c (实现多选删除功能)

        public BigInteger recordId;
    }
}
