package com.ruoyi.system.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple11;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MedicalPlatform extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","",""};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","600280811115610fe157fe5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16600281111561103b57fe5b14151561107d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107490614d5f565b60405180910390fd5b6110868961276e565b1515156110c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bf90614dbf565b60405180910390fd5b610120604051908101604052808981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200182815260200160001515815250600160008b81526020019081526020016000206000820151816000019080519060200190611167929190613d2c565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906111cb929190613d2c565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600401908051906020019061122f929190613d2c565b5060a082015181600501908051906020019061124c929190613d2c565b5060c0820151816006019080519060200190611269929190613d2c565b5060e082015181600701556101008201518160080160006101000a81548160ff021916908315150217905550905050505050505050505050565b600060026000838152602001908152602001600020600a0160009054906101000a900460ff169050919050565b6002808111156112dc57fe5b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16600281111561133657fe5b141515611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90614d5f565b60405180910390fd5b6001600281111561138557fe5b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1660028111156113df57fe5b141515611421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141890614d7f565b60405180910390fd5b61142a8b6112a3565b15151561146c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146390614d1f565b60405180910390fd5b610160604051908101604052808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185815260200184815260200183815260200182815260200160001515815250600260008d81526020019081526020016000206000820151816000019080519060200190611517929190613d2c565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061157b929190613d2c565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040190805190602001906115df929190613d2c565b5060a08201518160050190805190602001906115fc929190613d2c565b5060c0820151816006019080519060200190611619929190613d2c565b5060e0820151816007019080519060200190611636929190613d2c565b50610100820151816008019080519060200190611654929190613d2c565b50610120820151816009015561014082015181600a0160006101000a81548160ff0219169083151502179055509050505050505050505050505050565b61169a8161276e565b1515156116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390614dbf565b60405180910390fd5b600180600083815260200190815260200160002060080160006101000a81548160ff02191690831515021790555050565b60006001600083815260200190815260200160002090506117926000808360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040183613baf565b6118006000808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040183613baf565b60016000838152602001908152602001600020600080820160006118249190613dac565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061185b9190613dac565b6003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556004820160006118929190613dac565b6005820160006118a29190613dac565b6006820160006118b29190613dac565b60078201600090556008820160006101000a81549060ff021916905550505050565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050180548060200260200160405190810160405280929190818152602001828054801561196157602002820191906000526020600020905b81548152602001906001019080831161194d575b50505050509050919050565b611975613df4565b600260008381526020019081526020016000206101606040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a2e5780601f10611a0357610100808354040283529160200191611a2e565b820191906000526020600020905b815481529060010190602001808311611a1157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b265780601f10611afb57610100808354040283529160200191611b26565b820191906000526020600020905b815481529060010190602001808311611b0957829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c1e5780601f10611bf357610100808354040283529160200191611c1e565b820191906000526020600020905b815481529060010190602001808311611c0157829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cc05780601f10611c9557610100808354040283529160200191611cc0565b820191906000526020600020905b815481529060010190602001808311611ca357829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d625780601f10611d3757610100808354040283529160200191611d62565b820191906000526020600020905b815481529060010190602001808311611d4557829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e045780601f10611dd957610100808354040283529160200191611e04565b820191906000526020600020905b815481529060010190602001808311611de757829003601f168201915b50505050508152602001600882018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ea65780601f10611e7b57610100808354040283529160200191611ea6565b820191906000526020600020905b815481529060010190602001808311611e8957829003601f168201915b5050505050815260200160098201548152602001600a820160009054906101000a900460ff1615151515815250509050611f24600080836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050183613baf565b611f72600080836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050183613baf565b6002600083815260200190815260200160002060008082016000611f969190613dac565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000611fcd9190613dac565b6003820160006101","","",""};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"getSickAppointment(uint256,address)\",\"name\":\"getSickAppointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"appointments(uint256)\",\"name\":\"appointments\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isCompleted\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"updateAppointment(uint256,string,address,string,address,string,string,string,uint256)\",\"name\":\"updateAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isMedicalRecordFilled(uint256)\",\"name\":\"isMedicalRecordFilled\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"updateMedicalRecord(uint256,string,address,string,address,string,string,string,string,string,uint256)\",\"name\":\"updateMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"completeAppointment(uint256)\",\"name\":\"completeAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"deleteAppointment(uint256)\",\"name\":\"deleteAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getMedicalRecordList(address)\",\"name\":\"getMedicalRecordList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"deleteMedicalRecord(uint256)\",\"name\":\"deleteMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"medicalRecords(uint256)\",\"name\":\"medicalRecords\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":fals","e,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"register(string,string,uint256,uint8,address)\",\"name\":\"register\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isCompletedApoointment(uint256)\",\"name\":\"isCompletedApoointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"appointmentId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"createAppointment(string,address,string,address,string,string,string,uint256)\",\"name\":\"createAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getMedicalRecord(uint256,address)\",\"name\":\"getMedicalRecord\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"createMedicalRecord(string,address,string,address,string,string,string,string,string,uint256)\",\"name\":\"createMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"patientName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"users(address)\",\"name\":\"users\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"gender\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"userType\",\"type\":\"","uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}]},{\"methodSignatureAsString\":\"completeMedicalRecord(uint256)\",\"name\":\"completeMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getAppointmentsList(address)\",\"name\":\"getAppointmentsList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"accessPermissions(address,uint256)\",\"name\":\"accessPermissions\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"UserRegistered(address,uint8)\",\"name\":\"UserRegistered\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"userType\",\"type\":\"uint8\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AppointmentCreated(uint256,address,address)\",\"name\":\"AppointmentCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"RecordCreated(uint256,address,address)\",\"name\":\"RecordCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AccessGranted(address,address,uint256)\",\"name\":\"AccessGranted\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"patient\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"doctor\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"recordId\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETSICKAPPOINTMENT = "getSickAppointment";

    public static final String FUNC_APPOINTMENTS = "appointments";

    public static final String FUNC_UPDATEAPPOINTMENT = "updateAppointment";

    public static final String FUNC_ISMEDICALRECORDFILLED = "isMedicalRecordFilled";

    public static final String FUNC_UPDATEMEDICALRECORD = "updateMedicalRecord";

    public static final String FUNC_COMPLETEAPPOINTMENT = "completeAppointment";

    public static final String FUNC_DELETEAPPOINTMENT = "deleteAppointment";

    public static final String FUNC_GETMEDICALRECORDLIST = "getMedicalRecordList";

    public static final String FUNC_DELETEMEDICALRECORD = "deleteMedicalRecord";

    public static final String FUNC_MEDICALRECORDS = "medicalRecords";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_ISCOMPLETEDAPOOINTMENT = "isCompletedApoointment";

    public static final String FUNC_CREATEAPPOINTMENT = "createAppointment";

    public static final String FUNC_GETMEDICALRECORD = "getMedicalRecord";

    public static final String FUNC_CREATEMEDICALRECORD = "createMedicalRecord";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_COMPLETEMEDICALRECORD = "completeMedicalRecord";

    public static final String FUNC_GETAPPOINTMENTSLIST = "getAppointmentsList";

    public static final String FUNC_ACCESSPERMISSIONS = "accessPermissions";

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event APPOINTMENTCREATED_EVENT = new Event("AppointmentCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RECORDCREATED_EVENT = new Event("RecordCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ACCESSGRANTED_EVENT = new Event("AccessGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected MedicalPlatform(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean> getSickAppointment(BigInteger appointmentId, String _user) throws ContractException {
        final Function function = new Function(FUNC_GETSICKAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (Boolean) results.get(8).getValue());
    }

    public Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean> appointments(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_APPOINTMENTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (Boolean) results.get(8).getValue());
    }

    public TransactionReceipt updateAppointment(BigInteger appointmentId, String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateAppointment(BigInteger appointmentId, String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateAppointment(BigInteger appointmentId, String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<BigInteger, String, String, String, String, String, String, String, BigInteger> getUpdateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<BigInteger, String, String, String, String, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue()
        );
    }

    public Boolean isMedicalRecordFilled(BigInteger _recordId) throws ContractException {
        final Function function = new Function(FUNC_ISMEDICALRECORDFILLED,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_recordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt updateMedicalRecord(BigInteger recordId, String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateMedicalRecord(BigInteger recordId, String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateMedicalRecord(BigInteger recordId, String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple11<BigInteger, String, String, String, String, String, String, String, String, String, BigInteger> getUpdateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple11<BigInteger, String, String, String, String, String, String, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue(),
                (BigInteger) results.get(10).getValue()
        );
    }

    public TransactionReceipt completeAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] completeAppointment(BigInteger appointmentId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompleteAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCompleteAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPLETEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt deleteAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteAppointment(BigInteger appointmentId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteAppointment(BigInteger appointmentId) {
        final Function function = new Function(
                FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public List getMedicalRecordList(String _user) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORDLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt deleteMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteMedicalRecord(BigInteger recordId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean> medicalRecords(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_MEDICALRECORDS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue(),
                (Boolean) results.get(10).getValue());
    }

    public TransactionReceipt register(String _name, String _gender, BigInteger _age, BigInteger _userType, String account) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_age),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_userType),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String _name, String _gender, BigInteger _age, BigInteger _userType, String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_age),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_userType),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String _name, String _gender, BigInteger _age, BigInteger _userType, String account) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_gender),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_age),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_userType),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

    public Boolean isCompletedApoointment(BigInteger appointmentId) throws ContractException {
        final Function function = new Function(FUNC_ISCOMPLETEDAPOOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(appointmentId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt createAppointment(String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createAppointment(String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAppointment(String _patientName, String _patient, String _doctorName, String _doctor, String _hospitalName, String _department, String _remark, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_remark),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, String, String, String, String, String, BigInteger> getCreateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEAPPOINTMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, String, String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue()
        );
    }

    public Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean> getMedicalRecord(BigInteger _recordId, String _user) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_recordId),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple11<String, String, String, String, String, String, String, String, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue(),
                (Boolean) results.get(10).getValue());
    }

    public TransactionReceipt createMedicalRecord(String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createMedicalRecord(String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateMedicalRecord(String patientName, String patient, String doctorName, String doctor, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, BigInteger createTime) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(patient),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(doctorName),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(doctor),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospitalName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(registrationInfo),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pastMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currentMedicalHistory),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple10<String, String, String, String, String, String, String, String, String, BigInteger> getCreateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple10<String, String, String, String, String, String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue()
        );
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> users(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, BigInteger, BigInteger, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue());
    }

    public TransactionReceipt completeMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] completeMedicalRecord(BigInteger recordId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompleteMedicalRecord(BigInteger recordId) {
        final Function function = new Function(
                FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(recordId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCompleteMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPLETEMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public List getAppointmentsList(String _user) throws ContractException {
        final Function function = new Function(FUNC_GETAPPOINTMENTSLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Boolean accessPermissions(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_ACCESSPERMISSIONS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List<UserRegisteredEventResponse> getUserRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTERED_EVENT, transactionReceipt);
        ArrayList<UserRegisteredEventResponse> responses = new ArrayList<UserRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRegisteredEventResponse typedResponse = new UserRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AppointmentCreatedEventResponse> getAppointmentCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPOINTMENTCREATED_EVENT, transactionReceipt);
        ArrayList<AppointmentCreatedEventResponse> responses = new ArrayList<AppointmentCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppointmentCreatedEventResponse typedResponse = new AppointmentCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.patient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAppointmentCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPOINTMENTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAppointmentCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPOINTMENTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RecordCreatedEventResponse> getRecordCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDCREATED_EVENT, transactionReceipt);
        ArrayList<RecordCreatedEventResponse> responses = new ArrayList<RecordCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecordCreatedEventResponse typedResponse = new RecordCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.patient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRecordCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RECORDCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRecordCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RECORDCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AccessGrantedEventResponse> getAccessGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCESSGRANTED_EVENT, transactionReceipt);
        ArrayList<AccessGrantedEventResponse> responses = new ArrayList<AccessGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccessGrantedEventResponse typedResponse = new AccessGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.patient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.recordId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAccessGrantedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ACCESSGRANTED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAccessGrantedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ACCESSGRANTED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static MedicalPlatform load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MedicalPlatform(contractAddress, client, credential);
    }

    public static MedicalPlatform deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MedicalPlatform.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class UserRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public String user;

        public BigInteger userType;
    }

    public static class AppointmentCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String patient;

        public String doctor;
    }

    public static class RecordCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String patient;

        public String doctor;
    }

    public static class AccessGrantedEventResponse {
        public TransactionReceipt.Logs log;

        public String patient;

        public String doctor;

        public BigInteger recordId;
    }
}
