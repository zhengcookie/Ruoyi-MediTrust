package com.ruoyi.web.controller.system;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.*;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class Main extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","03038152906040526040518082805190602001908083835b60208310151561401c5780518252602082019150602081019050602083039250613ff7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168160020160405160200180828054600181600116156101000203166002900480156140af5780601f1061408d5761010080835404028352918201916140af565b820191906000526020600020905b81548152906001019060200180831161409b575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156140f857805182526020820191506020810190506020830392506140d3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561419e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4465706172746d656e74206d69736d617463680000000000000000000000000081525060200191505060405180910390fd5b806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142365780601f1061420b57610100808354040283529160200191614236565b820191906000526020600020905b81548152906001019060200180831161421957829003601f168201915b505050505091505092915050565b600061424f83614386565b15156142c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5369636b206e6f7420666f756e6400000000000000000000000000000000000081525060200191505060405180910390fd5b600360008481526020019081526020016000209050600081600101805460018160011615610100020316600290049050111515614368576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4d65646963616c207265636f7264206e6f7420666f756e64000000000000000081525060200191505060405180910390fd5b818160070190805190602001906143809291906144b0565b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60008060008091505b6001805490508210156144a45760018281548110151561441957fe5b906000526020600020015490508373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614497578092506144a9565b81806001019250506143fd565b600092505b5050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106144f157805160ff191683800117855561451f565b8280016001018555821561451f579182015b8281111561451e578251825591602001919060010190614503565b5b50905061452c9190614658565b5090565b6101006040519081016040528060008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106145b757805160ff19168380011785556145e5565b828001600101855582156145e5579182015b828111156145e45782518255916020019190600101906145c9565b5b5090506145f29190614658565b5090565b604080519081016040528060608152602001606081525090565b50805460018160011615610100020316600290046000825580601f106146365750614655565b601f0160209004906000526020600020908101906146549190614658565b5b50565b61467a91905b8082111561467657600081600090555060010161465e565b5090565b905600a165627a7a72305820a9f8a6560dd85feb58ae424057fc83bf0fdddbe2c4bb6e955884965f451263870029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","03038152906040526040518082805190602001908083835b60208310151561401c5780518252602082019150602081019050602083039250613ff7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168160020160405160200180828054600181600116156101000203166002900480156140af5780601f1061408d5761010080835404028352918201916140af565b820191906000526020600020905b81548152906001019060200180831161409b575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156140f857805182526020820191506020810190506020830392506140d3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561419e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4465706172746d656e74206d69736d617463680000000000000000000000000081525060200191505060405180910390fd5b806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142365780601f1061420b57610100808354040283529160200191614236565b820191906000526020600020905b81548152906001019060200180831161421957829003601f168201915b505050505091505092915050565b600061424f83614386565b15156142c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5369636b206e6f7420666f756e6400000000000000000000000000000000000081525060200191505060405180910390fd5b600360008481526020019081526020016000209050600081600101805460018160011615610100020316600290049050111515614368576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4d65646963616c207265636f7264206e6f7420666f756e64000000000000000081525060200191505060405180910390fd5b818160070190805190602001906143809291906144b0565b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60008060008091505b6001805490508210156144a45760018281548110151561441957fe5b906000526020600020015490508373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614497578092506144a9565b81806001019250506143fd565b600092505b5050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106144f157805160ff191683800117855561451f565b8280016001018555821561451f579182015b8281111561451e578251825591602001919060010190614503565b5b50905061452c9190614658565b5090565b6101006040519081016040528060008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106145b757805160ff19168380011785556145e5565b828001600101855582156145e5579182015b828111156145e45782518255916020019190600101906145c9565b5b5090506145f29190614658565b5090565b604080519081016040528060608152602001606081525090565b50805460018160011615610100020316600290046000825580601f106146365750614655565b601f0160209004906000526020600020908101906146549190614658565b5b50565b61467a91905b8082111561467657600081600090555060010161465e565b5090565b905600a165627a7a72305820a9f8a6560dd85feb58ae424057fc83bf0fdddbe2c4bb6e955884965f451263870029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"sickIds(uint256)\",\"name\":\"sickIds\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"getSickAppointment(uint256)\",\"name\":\"getSickAppointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"updateMedicalRecord(uint256,string,string,string,string,string)\",\"name\":\"updateMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isMedicalRecordFilled(uint256)\",\"name\":\"isMedicalRecordFilled\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"createMedicalRecord(uint256,string,string,string)\",\"name\":\"createMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"createAppointment(uint256,string,string)\",\"name\":\"createAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"deleteSickAppointment(uint256)\",\"name\":\"deleteSickAppointment\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"sicks(uint256)\",\"name\":\"sicks\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"accountAddress\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"sex\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"sickAppointment(uint256)\",\"name\":\"sickAppointment\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"authorizeDoctor(uint256,string,string)\",\"name\":\"authorizeDoctor\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getMedicalRecordByIdentityNumber(uint256)\",\"name\":\"getMedicalRecordByIdentityNumber\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"getSickByIdentityNumber(uint256)\",\"name\":\"getSickByIdentityNumber\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"identityNumber\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"accountAddress\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"sex\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":f","alse,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"createSick(string,string,uint256,uint256,address)\",\"name\":\"createSick\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"sex\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"identityNumber\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"accountAddress\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getSicksList()\",\"name\":\"getSicksList\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint256[]\"}]},{\"methodSignatureAsString\":\"getSickByAccountAddress(address)\",\"name\":\"getSickByAccountAddress\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"accountAddr\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"sex\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"sickMedicalRecords(uint256)\",\"name\":\"sickMedicalRecords\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"isFilled\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"getPastMedicalHistory(uint256,string)\",\"name\":\"getPastMedicalHistory\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"endMedicalConsultation(uint256,string)\",\"name\":\"endMedicalConsultation\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"mrtype\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"isSickExist(uint256)\",\"name\":\"isSickExist\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"SickCreated(uint256,address,string,string,uint256)\",\"name\":\"SickCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"accountAddress\",\"type\":\"address\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"sex\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"AppointmentCreated(uint256,string,string)\",\"name\":\"AppointmentCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"MedicalRecordCreated(uint256,string,string,string,string)\",\"name\":\"MedicalRecordCreated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"MedicalRecordUpdated(uint256,string,string,string,string,string)\",\"name\":\"MedicalRecordUpdated\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"sickID\",\"type\":\"uint256\",\"internalType\":\"\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"st","ring\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SICKIDS = "sickIds";

    public static final String FUNC_GETSICKAPPOINTMENT = "getSickAppointment";

    public static final String FUNC_UPDATEMEDICALRECORD = "updateMedicalRecord";

    public static final String FUNC_ISMEDICALRECORDFILLED = "isMedicalRecordFilled";

    public static final String FUNC_CREATEMEDICALRECORD = "createMedicalRecord";

    public static final String FUNC_CREATEAPPOINTMENT = "createAppointment";

    public static final String FUNC_DELETESICKAPPOINTMENT = "deleteSickAppointment";

    public static final String FUNC_SICKS = "sicks";

    public static final String FUNC_SICKAPPOINTMENT = "sickAppointment";

    public static final String FUNC_AUTHORIZEDOCTOR = "authorizeDoctor";

    public static final String FUNC_GETMEDICALRECORDBYIDENTITYNUMBER = "getMedicalRecordByIdentityNumber";

    public static final String FUNC_GETSICKBYIDENTITYNUMBER = "getSickByIdentityNumber";

    public static final String FUNC_CREATESICK = "createSick";

    public static final String FUNC_GETSICKSLIST = "getSicksList";

    public static final String FUNC_GETSICKBYACCOUNTADDRESS = "getSickByAccountAddress";

    public static final String FUNC_SICKMEDICALRECORDS = "sickMedicalRecords";

    public static final String FUNC_GETPASTMEDICALHISTORY = "getPastMedicalHistory";

    public static final String FUNC_ENDMEDICALCONSULTATION = "endMedicalConsultation";

    public static final String FUNC_ISSICKEXIST = "isSickExist";

    public static final Event SICKCREATED_EVENT = new Event("SickCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPOINTMENTCREATED_EVENT = new Event("AppointmentCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MEDICALRECORDCREATED_EVENT = new Event("MedicalRecordCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MEDICALRECORDUPDATED_EVENT = new Event("MedicalRecordUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Main(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger sickIds(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_SICKIDS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<String, String> getSickAppointment(BigInteger sickID) throws ContractException {
        final Function function = new Function(FUNC_GETSICKAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt updateMedicalRecord(BigInteger sickID, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(registrationInfo),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateMedicalRecord(BigInteger sickID, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(registrationInfo),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateMedicalRecord(BigInteger sickID, String hospitalName, String department, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(registrationInfo),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<BigInteger, String, String, String, String, String> getUpdateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<BigInteger, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Boolean isMedicalRecordFilled(BigInteger sickID) throws ContractException {
        final Function function = new Function(FUNC_ISMEDICALRECORDFILLED, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt createMedicalRecord(BigInteger sickID, String hospitalName, String department, String registrationInfo) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(registrationInfo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createMedicalRecord(BigInteger sickID, String hospitalName, String department, String registrationInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(registrationInfo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateMedicalRecord(BigInteger sickID, String hospitalName, String department, String registrationInfo) {
        final Function function = new Function(
                FUNC_CREATEMEDICALRECORD, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(registrationInfo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, String, String, String> getCreateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEMEDICALRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, String, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt createAppointment(BigInteger sickID, String hospitalName, String department) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createAppointment(BigInteger sickID, String hospitalName, String department, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAppointment(BigInteger sickID, String hospitalName, String department) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(hospitalName),
                new Utf8String(department)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getCreateAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEAPPOINTMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt deleteSickAppointment(BigInteger sickID) {
        final Function function = new Function(
                FUNC_DELETESICKAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteSickAppointment(BigInteger sickID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETESICKAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteSickAppointment(BigInteger sickID) {
        final Function function = new Function(
                FUNC_DELETESICKAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteSickAppointmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETESICKAPPOINTMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple5<String, String, String, BigInteger, BigInteger> sicks(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_SICKS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public Tuple2<String, String> sickAppointment(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_SICKAPPOINTMENT, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt authorizeDoctor(BigInteger sickID, String department, String doctorName) {
        final Function function = new Function(
                FUNC_AUTHORIZEDOCTOR, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(department),
                new Utf8String(doctorName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] authorizeDoctor(BigInteger sickID, String department, String doctorName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUTHORIZEDOCTOR, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(department),
                new Utf8String(doctorName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuthorizeDoctor(BigInteger sickID, String department, String doctorName) {
        final Function function = new Function(
                FUNC_AUTHORIZEDOCTOR, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(department),
                new Utf8String(doctorName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getAuthorizeDoctorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUTHORIZEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple6<String, String, String, String, String, String> getMedicalRecordByIdentityNumber(BigInteger sickID) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALRECORDBYIDENTITYNUMBER, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, String, String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public Tuple5<String, String, String, BigInteger, BigInteger> getSickByIdentityNumber(BigInteger identityNumber) throws ContractException {
        final Function function = new Function(FUNC_GETSICKBYIDENTITYNUMBER, 
                Arrays.<Type>asList(new Uint256(identityNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public TransactionReceipt createSick(String name, String sex, BigInteger age, BigInteger identityNumber, String accountAddress) {
        final Function function = new Function(
                FUNC_CREATESICK, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(sex),
                new Uint256(age),
                new Uint256(identityNumber),
                new Address(accountAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createSick(String name, String sex, BigInteger age, BigInteger identityNumber, String accountAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATESICK, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(sex),
                new Uint256(age),
                new Uint256(identityNumber),
                new Address(accountAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateSick(String name, String sex, BigInteger age, BigInteger identityNumber, String accountAddress) {
        final Function function = new Function(
                FUNC_CREATESICK, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(sex),
                new Uint256(age),
                new Uint256(identityNumber),
                new Address(accountAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getCreateSickInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATESICK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public List getSicksList() throws ContractException {
        final Function function = new Function(FUNC_GETSICKSLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getSickByAccountAddress(String accountAddr) throws ContractException {
        final Function function = new Function(FUNC_GETSICKBYACCOUNTADDRESS, 
                Arrays.<Type>asList(new Address(accountAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public Tuple8<BigInteger, String, String, String, String, String, String, String> sickMedicalRecords(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_SICKMEDICALRECORDS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue());
    }

    public String getPastMedicalHistory(BigInteger sickID, String department) throws ContractException {
        final Function function = new Function(FUNC_GETPASTMEDICALHISTORY, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(department)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt endMedicalConsultation(BigInteger sickID, String mrtype) {
        final Function function = new Function(
                FUNC_ENDMEDICALCONSULTATION, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(mrtype)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] endMedicalConsultation(BigInteger sickID, String mrtype, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENDMEDICALCONSULTATION, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(mrtype)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEndMedicalConsultation(BigInteger sickID, String mrtype) {
        final Function function = new Function(
                FUNC_ENDMEDICALCONSULTATION, 
                Arrays.<Type>asList(new Uint256(sickID),
                new Utf8String(mrtype)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getEndMedicalConsultationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENDMEDICALCONSULTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Boolean isSickExist(BigInteger sickID) throws ContractException {
        final Function function = new Function(FUNC_ISSICKEXIST, 
                Arrays.<Type>asList(new Uint256(sickID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List<SickCreatedEventResponse> getSickCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SICKCREATED_EVENT, transactionReceipt);
        ArrayList<SickCreatedEventResponse> responses = new ArrayList<SickCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SickCreatedEventResponse typedResponse = new SickCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.accountAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sex = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.age = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSickCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SICKCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSickCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SICKCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AppointmentCreatedEventResponse> getAppointmentCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPOINTMENTCREATED_EVENT, transactionReceipt);
        ArrayList<AppointmentCreatedEventResponse> responses = new ArrayList<AppointmentCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AppointmentCreatedEventResponse typedResponse = new AppointmentCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sickID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.hospitalName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.department = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAppointmentCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPOINTMENTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAppointmentCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPOINTMENTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<MedicalRecordCreatedEventResponse> getMedicalRecordCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MEDICALRECORDCREATED_EVENT, transactionReceipt);
        ArrayList<MedicalRecordCreatedEventResponse> responses = new ArrayList<MedicalRecordCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MedicalRecordCreatedEventResponse typedResponse = new MedicalRecordCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sickID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.hospitalName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.department = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.doctorName = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.registrationInfo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeMedicalRecordCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MEDICALRECORDCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeMedicalRecordCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MEDICALRECORDCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<MedicalRecordUpdatedEventResponse> getMedicalRecordUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MEDICALRECORDUPDATED_EVENT, transactionReceipt);
        ArrayList<MedicalRecordUpdatedEventResponse> responses = new ArrayList<MedicalRecordUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MedicalRecordUpdatedEventResponse typedResponse = new MedicalRecordUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sickID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.hospitalName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.department = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.registrationInfo = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.pastMedicalHistory = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.currentMedicalHistory = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeMedicalRecordUpdatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MEDICALRECORDUPDATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeMedicalRecordUpdatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MEDICALRECORDUPDATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Main load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Main(contractAddress, client, credential);
    }

    public static Main deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Main.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class SickCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String accountAddress;

        public String name;

        public String sex;

        public BigInteger age;
    }

    public static class AppointmentCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger sickID;

        public String hospitalName;

        public String department;
    }

    public static class MedicalRecordCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger sickID;

        public String hospitalName;

        public String department;

        public String doctorName;

        public String registrationInfo;
    }

    public static class MedicalRecordUpdatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger sickID;

        public String hospitalName;

        public String department;

        public String registrationInfo;

        public String pastMedicalHistory;

        public String currentMedicalHistory;
    }
}
