import server from "@/utils/request";

// 鎺ュ彛瀹氫箟
export interface UserDetail {
  id: number;
  name: string;
  gender: string;
  age: number;
  userType: number;
  email: string;
  avatar: string;
}

export interface UserUpdateParams {
  userId: number;
  name: string;
  gender: string;
  age: number;
  email: string;
  avatar: string;
}

export interface AppointmentDetail {
  appointmentId: number;
  patientId: number;
  doctorId: number;
  patientName: string;
  doctorName: string;
  hospitalName: string;
  department: string;
  remark: string;
  createTime: number;
  isCompleted: boolean;
}

export interface MedicalRecordDetail {
  recordId: number;
  patientName: string;
  doctorName: string;
  hospitalName: string;
  department: string;
  registrationInfo: string;
  pastMedicalHistory: string;
  currentMedicalHistory: string;
  createTime: number;
  isFilled: boolean;
}

export interface StatisticsInfo {
  patient: number;
  appointment: number;
  medicalRecord: number;
}

export interface BlockchainInfo {
  blockNumber: number;
  transactionCount: number;
}

// 鐢ㄦ埛绠＄悊API
// 鍙戦€侀獙璇佺爜
export function sendCode(email: string) {
  return server.request({
    url: "/sendCode",
    method: "post",
    data: { email }
  });
}

// 鐢ㄦ埛娉ㄥ唽
export function register(name: string, gender: string, age: number, password: string, userType: number, email: string) {
  return server.request({
    url: "/register",
    method: "post",
    headers: {
      // 璁剧疆鏍囧織锛屽憡璇夋嫤鎴櫒杩欐槸鐧诲綍鐩稿叧璇锋眰锛屼笉搴旇杩涜浼氳瘽妫€鏌?
      isLogin: true
    },
    data: {
      name,
      gender,
      age,
      userType,
      password,
      email
    }
  });
}

// 鐢ㄦ埛鐧诲綍
export function login(userName: string, userType: number, password: string) {
  return server.request({
    url: `/login?userName=${userName}&userType=${userType}&password=${password}`,
    method: "post",
    headers: {
      // 璁剧疆鏍囧織锛屽憡璇夋嫤鎴櫒杩欐槸鐧诲綍璇锋眰锛屼笉搴旇杩涜浼氳瘽妫€鏌?
      isLogin: true
    }
  });
}

// 蹇樿瀵嗙爜
export function forgetPassword(userName: string, userType: number, password: string) {
  return server.request({
    url: `/forgetPassword?userName=${userName}&userType=${userType}&password=${password}`,
    method: "post",
    headers: {
      // 璁剧疆鏍囧織锛屽憡璇夋嫤鎴櫒杩欐槸鐧诲綍鐩稿叧璇锋眰锛屼笉搴旇杩涜浼氳瘽妫€鏌?
      isLogin: true
    }
  });
}

// 鑾峰彇鐢ㄦ埛淇℃伅
export function getUserDetails(userId: number) {
  return server.requestT<UserDetail>({
    url: "/getInfo",
    method: "get",
    params: { userId }
  });
}

// 鏇存柊鐢ㄦ埛淇℃伅
export function updateInfo(params: UserUpdateParams) {
  return server.request({
    url: "/updateInfo",
    method: "post",
    data: {
      id: params.userId,
      name: params.name,
      gender: params.gender,
      age: params.age,
      email: params.email,
      avatar: params.avatar
    }
  });
}

// 鑾峰彇鎵€鏈夋偅鑰?
export function getAllPatients() {
  return server.requestT<Array<{userId: number, name: string, gender: string, age: number, email: string}>>({
    url: "/getPatientsList",
    method: "get"
  });
}

// 鑾峰彇鎵€鏈夊尰鐢熷鍚?
export interface DoctorInfo {
  doctorId: number;
  doctorName: string;
}
// 鑾峰彇鎵€鏈夌梾浜哄鍚?
export interface PatientInfo {
  doctorId: number;
  doctorName: string;
}

export function getAllDoctorsName() {
  return server.requestT<DoctorInfo[]>({
    url: "/getAllDoctorsName",
    method: "get"
  });
}

export function getAllPatientsName() {
  return server.requestT<PatientInfo[]>({
    url: "/getAllPatientsName",
    method: "get"
  });
}

// 棰勭害绠＄悊API
// 鍒涘缓棰勭害
export function createAppointment(
  patientName: string, 
  doctorName: string, 
  hospitalName: string, 
  department: string, 
  remark: string, 
  createdAt: number
) {
  return server.request({
    url: "/createAppointment",
    method: "post",
    data: {
      patientName,
      doctorName,
      hospitalName,
      department,
      remark,
      createdAt
    }
  });
}

// 瀹屾垚棰勭害
export function completeAppointment(appointmentId: number) {
  return server.request({
    url: `/completeAppointment?appointmentId=${appointmentId}`,
    method: "post",
  });
}

// 鏇存柊棰勭害
export function updateAppointment(
  id: number, 
  hospitalName: string, 
  department: string, 
  remark: string, 
  createdAt: number
) {
  return server.request({
    url: "/updateAppointment",
    method: "post",
    data: {
      id,
      hospitalName,
      department,
      remark,
      createdAt
    }
  });
}

// 鑾峰彇棰勭害璇︽儏
export function getSickAppointment(appointmentId: number, userId: number) {
  return server.requestT<AppointmentDetail>({
    url: "/getSickAppointment",
    method: "get",
    params: { appointmentId, userId }
  });
}

// 鑾峰彇鐢ㄦ埛鍏宠仈鐨勬墍鏈夐绾?
export function getAppointmentsList(userId: number) {
  return server.requestT<AppointmentDetail[]>({
    url: "/getAppointmentsList",
    method: "get",
    params: { userId }
  });
}

// 鍒犻櫎棰勭害
export function deleteAppointment(appointmentId: number) {
  return server.request({
    url: "/deleteAppointment",
    method: "post",
    params: { appointmentId }
  });
}

// 鐥呭巻绠＄悊API
// 鍒涘缓鐥呭巻
export function createMedicalRecord(
  patientName: string, 
  doctorName: string, 
  hospitalName: string, 
  department: string, 
  registrationInfo: string, 
  pastMedicalHistory: string, 
  currentMedicalHistory: string, 
  createdAt: number
) {
  return server.request({
    url: "/createMedicalRecord",
    method: "post",
    data: {
      patientName,
      doctorName,
      hospitalName,
      department,
      registrationInfo,
      pastMedicalHistory,
      currentMedicalHistory,
      createdAt
    }
  });
}

// 瀹屾垚鐥呭巻濉啓
export function completeMedicalRecord(recordId: number) {
  return server.request({
    url: "/completeMedicalRecord",
    method: "post",
    params: { recordId }
  });
}

// 鏇存柊鐥呭巻
export function updateMedicalRecord(
  id: number, 
  hospitalName: string, 
  department: string, 
  registrationInfo: string, 
  pastMedicalHistory: string, 
  currentMedicalHistory: string, 
  createdAt: number
) {
  return server.request({
    url: "/updateMedicalRecord",
    method: "post",
    data: {
      id,
      hospitalName,
      department,
      registrationInfo,
      pastMedicalHistory,
      currentMedicalHistory,
      createdAt
    }
  });
}

// 鍒犻櫎鐥呭巻
export function deleteMedicalRecord(recordId: number) {
  return server.request({
    url: "/deleteMedicalRecord",
    method: "post",
    params: { recordId }
  });
}

// 鑾峰彇鐥呭巻璇︽儏
export function getMedicalRecordByIdentityNumber(recordId: number, userId: number) {
  return server.requestT<MedicalRecordDetail>({
    url: `/getMedicalRecordByIdentityNumber?recordId=${recordId}&userId=${userId}`,
    method: "get",
  });
}

// 鑾峰彇鐢ㄦ埛鍏宠仈鐨勬墍鏈夌梾鍘?
export function getMedicalRecordList(userId: number) {
  return server.requestT<MedicalRecordDetail[]>({
    url: "/getMedicalRecordList",
    method: "get",
    params: { userId }
  });
}

// 绯荤粺缁熻API
// 鑾峰彇鍖哄潡閾句俊鎭?
export function getBlockchainInfo() {
  return server.requestT<BlockchainInfo>({
    url: "/blockchainInfo",
    method: "get"
  });
}

// 鑾峰彇鐢ㄦ埛鎵€鏈変俊鎭粺璁?
export function getUserStatistics(userId: number) {
  return server.requestT<StatisticsInfo>({
    url: "/getAll",
    method: "get",
    params: { userId }
  });
} 
<template>
    <div>
        <div style="display: flex; justify-content: space-between; margin-top: 20px">
            <el-card style="width: 48%">
                <template #header>
                    <div class="info-header">
                        <span class="header-text">绯荤粺鏁版嵁缁熻</span>
                    </div>
                </template>
                <div class="chart-stats">
                    <div class="stat-item">
                        <div class="stat-value">{{ blockchainStats.blockNumber }}</div>
                        <div class="stat-label">鍖哄潡楂樺害</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">{{ blockchainStats.transactionCount }}</div>
                        <div class="stat-label">浜ゆ槗鎬绘暟</div>
                    </div>

                </div>
                <div ref="pieChartRef" style="width: 100%; height: 400px"></div>
            </el-card>

            <el-card style="width: 48%">
                <template #header>
                    <div class="info-header">
                        <span class="header-text">鍖荤枟鏁版嵁缁熻</span>
                    </div>
                </template>
                <div class="chart-stats">
                    <div class="stat-item">
                        <div class="stat-value">{{ systemStats.appointments }}</div>
                        <div class="stat-label">棰勭害鏁伴噺</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">{{ systemStats.medicalRecords }}</div>
                        <div class="stat-label">鐥呭巻鏁伴噺</div>
                    </div>
                </div>
                <div ref="barChartRef" style="width: 100%; height: 400px"></div>
            </el-card>
        </div>
    </div>
</template>

<script setup lang="ts">
import { onMounted, ref, reactive } from 'vue';
import * as echarts from 'echarts';
import { getBlockchainInfo, getUserStatistics } from "../../api/medical";

const pieChartRef = ref<HTMLElement | null>(null);
const barChartRef = ref<HTMLElement | null>(null);

const blockchainStats = reactive({
    blockNumber: 0,
    transactionCount: 0,
    query: 0,
    queryCount: 0
});

const systemStats = reactive({
    appointments: 0,
    medicalRecords: 0,
    doctors: 0,
    records: 0
});

const initPieChart = async () => {
    try {
        const response = await getBlockchainInfo();
        // Check if response exists and has data
        if (!response) {
            console.error('Blockchain data response is empty');
            return;
        }
        
        // Initialize chart
        const chart = echarts.init(pieChartRef.value);

        // Set default values in case properties are undefined
        const blockNumber = response?.blockNumber || 0;
        const transactionCount = response?.transactionCount || 0;
        
        // Update statistics safely
        blockchainStats.blockNumber = blockNumber;
        blockchainStats.transactionCount = transactionCount;

        const option = {
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b}: {c} ({d}%)'
            },
            legend: {
                orient: 'vertical',
                left: 'left'
            },
            series: [
                {
                    name: '鍖哄潡閾炬暟鎹?,
                    type: 'pie',
                    radius: '60%',
                    data: [
                        { value: blockNumber, name: '鍖哄潡楂樺害' },
                        { value: transactionCount, name: '浜ゆ槗鎬绘暟' },
                    ],
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }
            ]
        };

        chart.setOption(option);

        window.addEventListener('resize', () => {
            chart.resize();
        });
    } catch (error) {
        console.error('Failed to load blockchain data:', error);
    }
};

const userId = parseInt(localStorage.getItem('userId') || '0');

const initBarChart = async () => {
    try {
        const response = await getUserStatistics(userId);
        // Check if response exists
        if (!response) {
            console.error('System data response is empty');
            return;
        }
        
        // Initialize chart
        const chart = echarts.init(barChartRef.value);
        
        // Set default values in case properties are undefined
        const appointments = response?.appointment || 0;
        const medicalRecords = response?.medicalRecord || 0;
        
        // Update statistics safely
        systemStats.appointments = appointments;
        systemStats.medicalRecords = medicalRecords;

        const option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow'
                }
            },
            xAxis: {
                type: 'category',
                data: ['棰勭害鏁伴噺', '鐥呭巻鏁伴噺']
            },
            yAxis: {
                type: 'value'
            },
            series: [{
                data: [
                    appointments,
                    medicalRecords,
                ],
                type: 'bar',
                showBackground: true,
                backgroundStyle: {
                    color: 'rgba(180, 180, 180, 0.2)'
                }
            }]
        };

        chart.setOption(option);

        window.addEventListener('resize', () => {
            chart.resize();
        });
    } catch (error) {
        console.error('Failed to load system data:', error);
    }
};

onMounted(() => {
    initPieChart();
    initBarChart();
});
</script>

<style scoped>
/* 鍗＄墖鏍峰紡 */
.el-card {
    background: linear-gradient(135deg, #ffffff 0%, #f0f2f5 100%);
    border: none;
    border-radius: 15px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
}

.el-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #4a9eff);
}

/* 缁熻鍖哄煙鏍峰紡 */
.chart-stats {
    display: flex;
    justify-content: space-around;
    /* margin-bottom: 20px; */
    background: linear-gradient(135deg, #f8f9ff 0%, #f0f4ff 100%);
    border-radius: 12px;
    padding: 20px;
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(0, 209, 255, 0.1);
}

/* 绉戞妧鎰熷厜鏁?*/
.chart-stats::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        45deg,
        transparent 45%,
        rgba(0, 209, 255, 0.1) 50%,
        transparent 55%
    );
    animation: light-sweep 3s infinite linear;
}

/* 缁熻椤规牱寮?*/
.stat-item {
    position: relative;
    text-align: center;
    padding: 15px 25px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 209, 255, 0.2);
    z-index: 1;
}

.stat-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 209, 255, 0.2);
}

/* 鏁板€兼牱寮?*/
.stat-value {
    font-size: 28px;
    font-weight: bold;
    background: linear-gradient(45deg, #4a9e5c, #00BCD4);
    -webkit-background-clip: text;
    color: transparent;
    position: relative;
}

/* 鏍囩鏍峰紡 */
.stat-label {
    font-size: 16px;
    color: #5c6c8c;
    margin-top: 5px;
    font-weight: 500;
}

/* 鏍囬鏍峰紡 */
.info-header {
    padding: 15px 0;
    position: relative;
}

.header-text {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
    position: relative;
    padding-left: 15px;
}

.header-text::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 18px;
    background: linear-gradient(to bottom, #4a9e5c, #4a9eff);
    border-radius: 2px;
}

/* 鍔ㄧ敾鏁堟灉 */
@keyframes light-sweep {
    0% {
        transform: translate(-50%, -50%) rotate(0deg);
    }
    100% {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}

/* 鍥捐〃瀹瑰櫒鏍峰紡 */
.el-card :deep(.echarts) {
    border-radius: 8px;
    padding: 10px;
    background: rgba(255, 255, 255, 0.8);
}
</style>
<template>
    <div class="medical-records">
        <h2 class="page-title">鐥呭巻绠＄悊</h2>
        <div class="search-section">

            <el-input v-model="searchText" placeholder="璇疯緭鍏ョ梾鍘咺D" class="search-input">
            </el-input>
            <el-button type="primary" @click="handleSearch" class="search-button">鎼滅储鐥呭巻</el-button>
            <el-button type="primary" @click="openFillInDialog" class="add-button">濉啓鐥呭巻</el-button>
        </div>

        <el-table :data="tableData" border style="min-width: 100%">
            <el-table-column fixed prop="recordId" label="鐥呭巻ID" width="120" />
            <el-table-column prop="patientName" label="鎮ｈ€呭鍚? width="120" />
            <el-table-column prop="hospitalName" label="鍖婚櫌鍚嶇О" width="180" />
            <el-table-column prop="department" label="绉戝" width="120" />
            <el-table-column prop="doctorName" label="鍖荤敓濮撳悕" width="120" />
            <el-table-column prop="createTime" label="鍒涘缓鏃堕棿" width="120" />
            <el-table-column prop="isFilled" label="鐥呭巻鐘舵€? width="100">
                <template #default="scope">
                    <el-tag :type="scope.row.isFilled ? 'success' : 'info'">
                        {{ scope.row.isFilled ? '宸插畬鎴? : '鏈畬鎴? }}
                    </el-tag>
                </template>
            </el-table-column>

            <el-table-column label="鎿嶄綔">
                <template #default="scope">
                    <el-button type="primary" @click="completeRecord(scope.row)">瀹屾垚</el-button>
                    <el-button type="info" @click="EditRecord(scope.row)">缂栬緫</el-button>
                    <el-button type="danger" @click="deleteRecord(scope.row)">鍒犻櫎</el-button>
                </template>
            </el-table-column>
        </el-table>

        <div class="pagination">
            <el-pagination v-model:current-page="currentPage" v-model:page-size="pageSize"
                :page-sizes="[10, 20, 30, 50]" :total="total" layout="total, sizes, prev, pager, next"
                @size-change="handleSizeChange" @current-change="handleCurrentChange" />
        </div>

        <el-dialog v-model="dialogVisible" :title="dialogTitle" width="60%" @close="closeDialog">
            <el-form :model="recordForm" :rules="rules" ref="recordFormRef">
                <el-descriptions :column="2" border>
                    <el-descriptions-item label="鐥呭巻缂栧彿" v-if="dialogTitle !== '濉啓鐥呭巻'">
                        <el-input v-model="recordForm.recordId" :disabled="true" />
                    </el-descriptions-item>
                    <el-descriptions-item label="鎮ｈ€呭鍚?>
                        <el-autocomplete
                            v-model="recordForm.patientName"
                            :fetch-suggestions="queryPatientNames"
                            placeholder="璇疯緭鍏ユ偅鑰呭鍚?
                            :trigger-on-focus="true"
                            clearable
                            :disabled="viewOnly"
                            @select="handlePatientSelect"
                            @focus="onPatientInputFocus"
                        ></el-autocomplete>
                    </el-descriptions-item>

                    <el-descriptions-item label="鍖婚櫌鍚嶇О">
                        <el-autocomplete
                            v-model="recordForm.hospitalName"
                            :fetch-suggestions="queryHospitals"
                            placeholder="璇疯緭鍏ユ垨閫夋嫨鍖婚櫌"
                            clearable
                            :disabled="viewOnly"
                            @select="handleHospitalSelect"
                        ></el-autocomplete>
                    </el-descriptions-item>
                    <el-descriptions-item label="绉戝">
                        <el-autocomplete
                            v-model="recordForm.department"
                            :fetch-suggestions="queryDepartments"
                            placeholder="璇疯緭鍏ユ垨閫夋嫨绉戝"
                            clearable
                            :disabled="viewOnly"
                            @select="handleDepartmentSelect"
                        ></el-autocomplete>
                    </el-descriptions-item>
                    <el-descriptions-item label="鍖荤敓濮撳悕">
                        <el-input v-model="recordForm.doctorName" :disabled="viewOnly" />
                    </el-descriptions-item>

                    <el-descriptions-item label="鎸傚彿淇℃伅">
                        <el-input v-model="recordForm.registrationInfo" type="textarea" :rows="2"
                            :disabled="viewOnly" />
                    </el-descriptions-item>
                    <el-descriptions-item label="鏃㈠線鐥呭彶">
                        <el-input v-model="recordForm.pastMedicalHistory" type="textarea" :rows="3"
                            :disabled="viewOnly" />
                    </el-descriptions-item>
                    <el-descriptions-item label="鐜扮梾鍙?>
                        <el-input v-model="recordForm.currentMedicalHistory" type="textarea" :rows="3"
                            :disabled="viewOnly" />
                    </el-descriptions-item>
                    <el-descriptions-item label="鐘舵€?>{{ recordForm.isFilled ? '宸插畬鎴? : '鏈畬鎴?
                    }}</el-descriptions-item>
                    <el-descriptions-item label="鍒涘缓鏃ユ湡">
                        <template v-if="dialogTitle === '濉啓鐥呭巻'">
                            <span>{{ currentDateTime }}</span>
                        </template>
                        <template v-else>
                            {{ formatDateTime(recordForm.createdAt) }}
                        </template>
                    </el-descriptions-item>
                </el-descriptions>

            </el-form>
            <template #footer>
                <span class="dialog-footer">
                    <el-button @click="dialogVisible = false">鍙栨秷</el-button>
                    <el-button type="primary" @click="saveRecord">淇濆瓨</el-button>
                </span>
            </template>
        </el-dialog>

        <!-- <el-dialog v-model="infoDialogVisible" title="鐥呭巻璇︽儏" width="60%">
            <div>
                <p><strong>鐥呭巻ID:</strong> {{ medicalRecordDetails.recordId }}</p>
                <p><strong>鎮ｈ€呭鍚?</strong> {{ medicalRecordDetails.patientName }}</p>
                <p><strong>鍖婚櫌鍚嶇О:</strong> {{ medicalRecordDetails.hospitalName }}</p>
                <p><strong>绉戝:</strong> {{ medicalRecordDetails.department }}</p>
                <p><strong>鍖荤敓濮撳悕:</strong> {{ medicalRecordDetails.doctorName }}</p>
                <p><strong>鎸傚彿淇℃伅:</strong> {{ medicalRecordDetails.registrationInfo }}</p>
                <p><strong>鏃㈠線鐥呭彶:</strong> {{ medicalRecordDetails.pastMedicalHistory }}</p>
                <p><strong>鐜扮梾鍙?</strong> {{ medicalRecordDetails.currentMedicalHistory }}</p>
            </div>
            <template #footer>
                <el-button @click="infoDialogVisible = false">鍏抽棴</el-button>
            </template>
        </el-dialog> -->
    </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted, onUnmounted } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import type { FormInstance } from 'element-plus';
import {getMedicalRecordByIdentityNumber, getMedicalRecordList, completeMedicalRecord, createMedicalRecord, updateMedicalRecord, deleteMedicalRecord, getAllPatientsName } from "../../api/medical";

const searchText = ref('')
const dialogVisible = ref(false)
const dialogTitle = ref('')
const viewOnly = ref(false)
const currentPage = ref(1)
const pageSize = ref(10)
const total = ref(0)
const tableData = ref<any[]>([])
const loading = ref(false)

// Define recordForm as a reactive object
const recordForm = reactive({
    recordId: 0,
    patientName: '',
    doctorName: '',
    hospitalName: '',
    department: '',
    registrationInfo: '',
    pastMedicalHistory: '',
    currentMedicalHistory: '',
    isFilled: false,
    createdAt: 0
});

const recordFormRef = ref<FormInstance>();
const userId = parseInt(localStorage.getItem("userId") || "0");

// 娣诲姞褰撳墠娴佸姩鐨勬椂闂?const currentDateTime = ref('');
let timeInterval: ReturnType<typeof setInterval> | null = null;

// 鏇存柊褰撳墠鏃堕棿鐨勫嚱鏁?const updateCurrentTime = () => {
    currentDateTime.value = formatDateTime(Date.now());
};

// 瀛樺偍鎵€鏈夋偅鑰呬俊鎭?const patientsList = ref<Array<{patientId: number, patientName: string}>>([]);

// 鍦ㄨ緭鍏ユ鑾峰緱鐒︾偣鏃朵篃灏濊瘯鍔犺浇鏁版嵁
const onPatientInputFocus = () => {
    console.log("鎮ｈ€呰緭鍏ユ鑾峰緱鐒︾偣");
    if (patientsList.value.length === 0) {
        console.log("灏濊瘯鍔犺浇鎮ｈ€呭垪琛?..");
        fetchPatients();
    }
};

// 鑾峰彇鎵€鏈夋偅鑰呬俊鎭?const fetchPatients = async () => {
    console.log("寮€濮嬭幏鍙栨偅鑰呭垪琛?..");
    
    // 娣诲姞涓€浜涙祴璇曟暟鎹紝浠ラ槻API鏆傛椂涓嶅伐浣?    const testPatients = [
        { patientId: 1, patientName: "寮犱笁" },
        { patientId: 2, patientName: "鏉庡洓" },
        { patientId: 3, patientName: "鐜嬩簲" }
    ];
    
    try {
        const response = await getAllPatientsName();
        console.log("API杩斿洖鍘熷鎮ｈ€呮暟鎹?", response);
        
        if (response && Array.isArray(response) && response.length > 0) {
            patientsList.value = response.map((patient: any) => ({
                patientId: patient.patientId,
                patientName: patient.patientName,
            }));
            console.log('鑾峰彇鎮ｈ€呭垪琛ㄦ垚鍔燂紝鏁伴噺:', patientsList.value.length);
            return Promise.resolve(response);
        } else {
            console.warn('API鏈繑鍥炴湁鏁堟偅鑰呮暟鎹紝浣跨敤娴嬭瘯鏁版嵁');
            patientsList.value = testPatients;
            return Promise.resolve(testPatients);
        }
    } catch (error) {
        console.error('鑾峰彇鎮ｈ€呭垪琛ㄥけ璐?, error);
        console.warn('浣跨敤娴嬭瘯鏁版嵁浠ｆ浛');
        patientsList.value = testPatients;
        return Promise.resolve(testPatients);
    }
};

// 鏌ヨ杩囨护鎮ｈ€呭鍚?const queryPatientNames = (queryString: string, callback: (suggestions: any[]) => void) => {
    console.log("鏌ヨ鎮ｈ€咃紝鏌ヨ瀛楃涓?", queryString, "褰撳墠鍒楄〃闀垮害:", patientsList.value.length);
    
    // 濡傛灉鍒楄〃涓虹┖鎴栭暱搴︿负0锛屼娇鐢ㄦ祴璇曟暟鎹?    if (!patientsList.value || patientsList.value.length === 0) {
        console.log("鎮ｈ€呭垪琛ㄤ负绌猴紝灏濊瘯鍔犺浇...");
        fetchPatients().then(() => {
            console.log("鍔犺浇鍚庤繃婊ゆ偅鑰?);
            filterPatients(queryString, callback);
        });
    } else {
        console.log("浣跨敤鐜版湁鎮ｈ€呭垪琛ㄨ繃婊?);
        filterPatients(queryString, callback);
    }
};

// 杩囨护鎮ｈ€呮暟鎹?const filterPatients = (queryString: string, callback: (suggestions: any[]) => void) => {
    console.log("杩囨护鎮ｈ€咃紝杈撳叆瀛楃:", queryString);
    
    // 纭繚鏈夎嚦灏戜竴涓偅鑰呮暟鎹?    if (!patientsList.value || patientsList.value.length === 0) {
        // 濡傛灉娌℃湁鏁版嵁锛岃繑鍥炴祴璇曟暟鎹?        const testPatients = [
            { patientId: 1, patientName: "寮犱笁" },
            { patientId: 2, patientName: "鏉庡洓" },
            { patientId: 3, patientName: "鐜嬩簲" }
        ].map(patient => ({
            value: patient.patientName,
            id: String(patient.patientId),
            label: `${patient.patientName}`,
        }));
        console.log("娌℃湁鎮ｈ€呮暟鎹紝浣跨敤娴嬭瘯鏁版嵁");
        callback(testPatients);
        return;
    }
    
    // 濡傛灉鏌ヨ瀛楃涓蹭负绌烘垨鏈畾涔夛紝杩斿洖鎵€鏈夋偅鑰?    if (!queryString) {
        const allPatients = patientsList.value.map(patient => ({
            value: patient.patientName,
            id: String(patient.patientId || 0),
            label: `${patient.patientName}`,
        }));
        console.log("杩斿洖鎵€鏈夋偅鑰?", allPatients.length);
        callback(allPatients);
        return;
    }
    
    // 瀵规偅鑰呭悕杩涜杩囨护锛屾敮鎸佸崟涓瓧绗﹀尮閰?    const results = patientsList.value.filter(patient => {
        if (!patient || !patient.patientName) return false;
        // 瀵规偅鑰呭悕杩涜瀛楃鍖归厤锛屽拷鐣ュぇ灏忓啓
        return patient.patientName.toLowerCase().includes(queryString.toLowerCase());
    });
    
    console.log("杩囨护鍚庣殑缁撴灉鏁伴噺:", results.length);
    
    // 杞崲涓篴utocomplete鎵€闇€鏍煎紡
    const suggestions = results.map(patient => ({
        value: patient.patientName,
        id: String(patient.patientId || 0),
        label: `${patient.patientName}`
    }));
    
    console.log("杩斿洖鐨勬偅鑰呭缓璁垪琛ㄦ暟閲?", suggestions.length);
    callback(suggestions);
};

// 閫夋嫨鎮ｈ€呭鐞?const handlePatientSelect = (item: any) => {
    recordForm.patientName = item.value;
    console.log('宸查€夋嫨鎮ｈ€?', item);
};

// 绉戝閫夐」鍒楄〃
const departmentOptions = [
    { value: '鍐呯', label: '鍐呯' },
    { value: '澶栫', label: '澶栫' },
    { value: '濡囦骇绉?, label: '濡囦骇绉? },
    { value: '鍎跨', label: '鍎跨' },
    { value: '鐪肩', label: '鐪肩' },
    { value: '鍙ｈ厰绉?, label: '鍙ｈ厰绉? },
    { value: '鑰抽蓟鍠夌', label: '鑰抽蓟鍠夌' },
    { value: '鐨偆绉?, label: '鐨偆绉? },
    { value: '绁炵粡绉?, label: '绁炵粡绉? },
    { value: '绮剧蹇冪悊绉?, label: '绮剧蹇冪悊绉? },
    { value: '鑲跨槫绉?, label: '鑲跨槫绉? },
    { value: '涓尰绉?, label: '涓尰绉? },
    { value: '鎬ヨ瘖绉?, label: '鎬ヨ瘖绉? },
    { value: '妫€楠岀', label: '妫€楠岀' },
    { value: '鏀惧皠绉?, label: '鏀惧皠绉? },
    { value: '楹婚唹绉?, label: '楹婚唹绉? },
    { value: '鏁村舰绉?, label: '鏁村舰绉? },
    { value: '钀ュ吇绉?, label: '钀ュ吇绉? },
    { value: '搴峰绉?, label: '搴峰绉? }
];

// 鏌ヨ杩囨护绉戝
const queryDepartments = (queryString: string, callback: (suggestions: any[]) => void) => {
    const results = queryString
        ? departmentOptions.filter(
            (dept) => dept.value.toLowerCase().includes(queryString.toLowerCase())
        )
        : departmentOptions;
    
    callback(results);
};

// 閫夋嫨绉戝澶勭悊
const handleDepartmentSelect = (item: any) => {
    recordForm.department = item.value;
};

// 甯歌鍖婚櫌鍒楄〃
const hospitalOptions = [
    { value: '鍖椾含鍗忓拰鍖婚櫌', label: '鍖椾含鍗忓拰鍖婚櫌' },
    { value: '棣栭兘鍖荤澶у闄勫睘鍖椾含澶╁潧鍖婚櫌', label: '棣栭兘鍖荤澶у闄勫睘鍖椾含澶╁潧鍖婚櫌' },
    { value: '鍖椾含澶у绗竴鍖婚櫌', label: '鍖椾含澶у绗竴鍖婚櫌' },
    { value: '鍖椾含澶у浜烘皯鍖婚櫌', label: '鍖椾含澶у浜烘皯鍖婚櫌' },
    { value: '鍖椾含澶у绗笁鍖婚櫌', label: '鍖椾含澶у绗笁鍖婚櫌' },
    { value: '涓浗鍖诲绉戝闄㈠寳浜崗鍜屽尰闄?, label: '涓浗鍖诲绉戝闄㈠寳浜崗鍜屽尰闄? },
    { value: '涓浗鍖诲绉戝闄㈣偪鐦ゅ尰闄?, label: '涓浗鍖诲绉戝闄㈣偪鐦ゅ尰闄? },
    { value: '棣栭兘鍖荤澶у闄勫睘鍖椾含鍙嬭皧鍖婚櫌', label: '棣栭兘鍖荤澶у闄勫睘鍖椾含鍙嬭皧鍖婚櫌' },
    { value: '棣栭兘鍖荤澶у瀹ｆ鍖婚櫌', label: '棣栭兘鍖荤澶у瀹ｆ鍖婚櫌' },
    { value: '鍖椾含涓尰鑽ぇ瀛︿笢鐩撮棬鍖婚櫌', label: '鍖椾含涓尰鑽ぇ瀛︿笢鐩撮棬鍖婚櫌' },
    { value: '澶嶆棪澶у闄勫睘涓北鍖婚櫌', label: '澶嶆棪澶у闄勫睘涓北鍖婚櫌' },
    { value: '澶嶆棪澶у闄勫睘鍗庡北鍖婚櫌', label: '澶嶆棪澶у闄勫睘鍗庡北鍖婚櫌' },
    { value: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘鐟為噾鍖婚櫌', label: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘鐟為噾鍖婚櫌' },
    { value: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘浠佹祹鍖婚櫌', label: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘浠佹祹鍖婚櫌' },
    { value: '涓北澶у闄勫睘绗竴鍖婚櫌', label: '涓北澶у闄勫睘绗竴鍖婚櫌' },
];

// 鏌ヨ杩囨护鍖婚櫌
const queryHospitals = (queryString: string, callback: (suggestions: any[]) => void) => {
    const results = queryString
        ? hospitalOptions.filter(
            (hospital) => hospital.value.toLowerCase().includes(queryString.toLowerCase())
        )
        : hospitalOptions;
    
    callback(results);
};

// 閫夋嫨鍖婚櫌澶勭悊
const handleHospitalSelect = (item: any) => {
    recordForm.hospitalName = item.value;
};

const handleSearch = async () => {
    if (searchText.value == '') {
        ElMessage.error('璇疯緭鍏ョ梾鍘咺D');
        return;
    }

    try {
        const recordId = parseInt(searchText.value);
        if (isNaN(recordId)) {
            ElMessage.error('鐥呭巻ID蹇呴』鏄暟瀛?);
            return;
        }
        
        // 涓存椂灏濊瘯浣跨敤鍏朵粬API鏂规硶鑾峰彇鐥呭巻璇︽儏
        loading.value = true;
        console.log(`灏濊瘯鎼滅储鐥呭巻锛孖D: ${recordId}, 鐢ㄦ埛ID: ${userId}`);
        
        // 棣栧厛灏濊瘯浣跨敤getMedicalRecord鑾峰彇鐥呭巻
        let res = await getMedicalRecordByIdentityNumber(recordId, userId);
        console.log('鐥呭巻鏌ヨ缁撴灉:', res); // 娣诲姞鏃ュ織鏌ョ湅鍝嶅簲缁撴瀯

        // 纭繚res涓嶄负绌轰笖鏈夋暟鎹?        if (res) {
            // 閲嶇疆琛ㄥ崟锛岀‘淇濇病鏈夋棫鏁版嵁
            resetRecordForm();
            
            // 鐩存帴璁剧疆灞炴€ц€屼笉鏄娇鐢∣bject.assign
            recordForm.recordId = res.recordId;
            recordForm.patientName = res.patientName || '';
            recordForm.doctorName = res.doctorName || '';
            recordForm.hospitalName = res.hospitalName || '';
            recordForm.department = res.department || '';
            recordForm.registrationInfo = res.registrationInfo || '';
            recordForm.pastMedicalHistory = res.pastMedicalHistory || '';
            recordForm.currentMedicalHistory = res.currentMedicalHistory || '';
            recordForm.isFilled = res.isFilled || false;
            recordForm.createdAt = res.createTime || Date.now();

            // 璁剧疆瑙嗗浘鐘舵€?            viewOnly.value = res.isFilled;
            dialogTitle.value = '鐥呭巻璇︽儏';
            
            // 纭繚瀵硅瘽妗嗗彲瑙?            dialogVisible.value = true;
            
            // 閫氱煡鐢ㄦ埛鏌ヨ鎴愬姛
            ElMessage.success('鏌ヨ鐥呭巻鎴愬姛');
        } else {
            ElMessage.error('鎼滅储澶辫触锛屾湭鎵惧埌鐥呭巻淇℃伅');
        }
    } catch (error) {
        console.error('鎼滅储鐥呭巻鍑洪敊:', error);
        ElMessage.error('鎼滅储澶辫触');
    } finally {
        loading.value = false;
    }
}

const handleSizeChange = (val: number) => {
    pageSize.value = val;
    getMedicalRecord();
}

const handleCurrentChange = (val: number) => {
    currentPage.value = val;
    getMedicalRecord();
}

const completeRecord = (row: any) => {
    ElMessageBox.confirm('纭瀹屾垚姝ょ梾鍘?', '鎻愮ず', {
        confirmButtonText: '纭畾',
        cancelButtonText: '鍙栨秷',
        type: 'warning'
    }).then(async () => {
        try {
            const recordId = parseInt(row.recordId);
            const response = await completeMedicalRecord(recordId);
            console.log('瀹屾垚鐥呭巻鍝嶅簲:', response); // 鏌ョ湅鍝嶅簲缁撴瀯

            if (response && response.code === 200) {
                ElMessage.success('鐥呭巻宸插畬鎴?);
                getMedicalRecord();
            } else {
                ElMessage.error(response?.msg || '鎿嶄綔澶辫触');
            }
        } catch (error) {
            ElMessage.error('鎿嶄綔澶辫触');
        }
    });
}

const openFillInDialog = () => {
    resetRecordForm();
    dialogTitle.value = '濉啓鐥呭巻';
    viewOnly.value = false;
    dialogVisible.value = true;

    // 鍚姩鏃堕棿娴侀€濇晥鏋?    updateCurrentTime(); // 绔嬪嵆鏇存柊涓€娆?    if (timeInterval) clearInterval(timeInterval);
    timeInterval = setInterval(updateCurrentTime, 1000); // 姣忕鏇存柊涓€娆?}

// 琛ㄥ崟楠岃瘉瑙勫垯
const rules = {

    patientName: [
        { required: true, message: '璇疯緭鍏ユ偅鑰呭鍚?, trigger: 'blur' }
    ],
    doctorName: [
        { required: true, message: '璇疯緭鍏ュ尰鐢熷鍚?, trigger: 'blur' }
    ],
    hospitalName: [
        { required: true, message: '璇疯緭鍏ュ尰闄㈠悕绉?, trigger: 'blur' }
    ],
    department: [
        { required: true, message: '璇疯緭鍏ョ瀹?, trigger: 'blur' }
    ]
};

const saveRecord = async () => {
    if (!recordFormRef.value) return;

    try {
        await recordFormRef.value.validate(async (valid) => {
            if (valid) {
                // 纭繚patientName鏄瓧绗︿覆绫诲瀷
                if (typeof recordForm.patientName !== 'string') {
                    recordForm.patientName = String(recordForm.patientName);
                }

                // 纭繚doctorName鏄瓧绗︿覆绫诲瀷
                if (typeof recordForm.doctorName !== 'string') {
                    recordForm.doctorName = String(recordForm.doctorName);
                }

                // 鑾峰彇褰撳墠鏃堕棿鎴筹紝鐢ㄤ簬鍙戦€佸埌鍚庣
                const currentTimestamp = Date.now();

                if (dialogTitle.value === "濉啓鐥呭巻") {
                    // 鍒涘缓鏂扮梾鍘嗭紝浣跨敤褰撳墠鏃堕棿鎴?                    recordForm.createdAt = currentTimestamp;
                    const response = await createMedicalRecord(
                        recordForm.patientName,
                        recordForm.doctorName,
                        recordForm.hospitalName,
                        recordForm.department,
                        recordForm.registrationInfo,
                        recordForm.pastMedicalHistory,
                        recordForm.currentMedicalHistory,
                        currentTimestamp // 鍙戦€佹椂闂存埑鍒板悗绔?                    );
                    console.log('鍒涘缓鐥呭巻鍝嶅簲:', response); // 鏌ョ湅鍝嶅簲缁撴瀯

                    if (response && response.code === 200) {
                        ElMessage.success('鐥呭巻濉啓鎴愬姛');
                        dialogVisible.value = false;
                        getMedicalRecord();
                        resetRecordForm();
                    } else {
                        ElMessage.error("鐥呭巻濉啓澶辫触");
                    }
                } else {
                    // 鏇存柊鐜版湁鐥呭巻锛屼娇鐢ㄥ綋鍓嶆椂闂存埑
                    recordForm.createdAt = currentTimestamp;
                    const response = await updateMedicalRecord(
                        recordForm.recordId,
                        recordForm.hospitalName,
                        recordForm.department,
                        recordForm.registrationInfo,
                        recordForm.pastMedicalHistory,
                        recordForm.currentMedicalHistory,
                        currentTimestamp // 鍙戦€佹椂闂存埑鍒板悗绔?                    );
                    console.log('鏇存柊鐥呭巻鍝嶅簲:', response); // 鏌ョ湅鍝嶅簲缁撴瀯

                    if (response && response.code === 200) {
                        ElMessage.success("鐥呭巻璇︽儏淇濆瓨鎴愬姛");
                        dialogVisible.value = false;
                        getMedicalRecord();
                        resetRecordForm();
                    } else {
                        ElMessage.error("鐥呭巻璇︽儏淇濆瓨澶辫触");
                    }
                }

                // 瀵硅瘽妗嗗叧闂椂娓呴櫎瀹氭椂鍣?                if (timeInterval) {
                    clearInterval(timeInterval);
                    timeInterval = null;
                }
            } else {
                ElMessage.warning('璇峰～鍐欏畬鏁寸梾鍘嗕俊鎭苟纭繚鏍煎紡姝ｇ‘');
            }
        });
    } catch (error) {
        ElMessage.error('濉啓鐥呭巻澶辫触');
    }
};

const EditRecord = (row: any) => {
    // 鍒涘缓鍓湰閬垮厤鐩存帴寮曠敤
    Object.assign(recordForm, {
        recordId: row.recordId,
        patientName: typeof row.patientName === 'number' ? String(row.patientName) : row.patientName,
        doctorName: typeof row.doctorName === 'number' ? String(row.doctorName) : row.doctorName,
        hospitalName: row.hospitalName,
        department: row.department,
        registrationInfo: row.registrationInfo,
        pastMedicalHistory: row.pastMedicalHistory,
        currentMedicalHistory: row.currentMedicalHistory,
        isFilled: row.isFilled,
        createdAt: row.createTime && typeof row.createTime === 'string' && !isNaN(Date.parse(row.createTime))
            ? Date.parse(row.createTime)
            : (row.createdAt || Date.now())
    });
    viewOnly.value = row.isFilled;
    dialogTitle.value = '鐥呭巻璇︽儏';
    dialogVisible.value = true;
}

const deleteRecord = async (row: any) => {
    ElMessageBox.confirm('纭鍒犻櫎姝ょ梾鍘?', '鎻愮ず', {
        confirmButtonText: '纭畾',
        cancelButtonText: '鍙栨秷',
        type: 'warning'
    }).then(async () => {
        try {
            const recordId = parseInt(row.recordId);
            const response = await deleteMedicalRecord(recordId);

            if (response && response.code === 200) {
                ElMessage.success('鍒犻櫎鎴愬姛');
                getMedicalRecord();
            } else {
                ElMessage.error(response?.msg || '鍒犻櫎澶辫触');
            }
        } catch (error) {
            ElMessage.error('鍒犻櫎澶辫触');
        }
    });
}

const formatDateTime = (timestamp: number) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

const getMedicalRecord = async () => {
    try {
        loading.value = true;
        const res = await getMedicalRecordList(
            userId
        );
        console.log('鑾峰彇鐥呭巻鍒楄〃鍝嶅簲:', res);
        tableData.value = res.map((record: any) => ({
            ...record,
            createTime: formatDateTime(record.createTime)
           
        }));
    } catch (error) {
        console.error('鑾峰彇鐥呭巻鍒楄〃澶辫触:', error);
        ElMessage.error('鑾峰彇鐥呭巻鍒楄〃澶辫触');
    } finally {
        loading.value = false;
    }
}

const resetRecordForm = () => {
    // Reset form fields
    Object.assign(recordForm, {
        recordId: '',
        patientName: '',
        doctorName: localStorage.getItem("name") || '', // 榛樿涓哄綋鍓嶇櫥褰曞尰鐢?        hospitalName: '',
        department: '',
        registrationInfo: '',
        pastMedicalHistory: '',
        currentMedicalHistory: '',
        isFilled: false,
        createdAt: 0
    });
};

// 鍦ㄥ叧闂璇濇鏃舵竻闄ゅ畾鏃跺櫒
const closeDialog = () => {
    if (timeInterval) {
        clearInterval(timeInterval);
        timeInterval = null;
    }
    resetRecordForm();
}

onMounted(() => {
    getMedicalRecord();
    // fetchPatients(); // 涓嶅啀闇€瑕佸湪鎸傝浇鏃惰幏鍙栨偅鑰呭垪琛?    
    // 鍒濆鍖栭噸缃〃鍗?    resetRecordForm();
    
    // 璁剧疆鏇存柊鏃堕棿鐨勫畾鏃跺櫒
    updateCurrentTime(); 
});

// 鍦ㄧ粍浠跺嵏杞芥椂娓呴櫎瀹氭椂鍣?onUnmounted(() => {
    if (timeInterval) {
        clearInterval(timeInterval);
    }
});
</script>

<style scoped>
.medical-records {
    padding: 20px;
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
    border-radius: 15px;
    position: relative;
    overflow: hidden;
}

.medical-records::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
    border-radius: 3px;
}

/* 鎼滅储鍖哄煙鏍峰紡 */
.search-section {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    position: relative;
    border: 1px solid rgba(33, 150, 243, 0.1);
    box-shadow: 0 4px 20px rgba(149, 157, 165, 0.1);
}

/* 娣诲姞绉戞妧鎰熻楗扮嚎鏉?*/
/* .search-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 20px;
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, #2196F3, transparent);
}

.search-section::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: 20px;
    width: 60px;
    height: 3px;
    background: linear-gradient(360deg, transparent, #2196F3);
} */
.page-title {
    font-size: 24px;
    color: #2c3e50;
    margin-bottom: 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    position: relative;
    padding-left: 15px;
}

.page-title::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 24px;
    background: linear-gradient(180deg, #4a9e5c, #2196F3);
    border-radius: 2px;
}

.search-label {
    margin-right: 15px;
    font-size: 15px;
    font-weight: 500;
    color: #2c3e50;
    position: relative;
    padding-left: 12px;
}

.search-input {
    display: flex;
    gap: 10px;
    flex: 1;
}

.add-button {
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
    position: relative;
    overflow: hidden;
    margin-left: 10px;
}

.search-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

.search-button {
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
    position: relative;
    overflow: hidden;
    /* height: 100%; */
}

.add-button:hover,
.search-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(74, 158, 92, 0.3);
    /* height: 100%; */
}

.add-button::after,
.search-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

@keyframes shine {
    0% {
        transform: translateX(-100%) rotate(45deg);
    }

    100% {
        transform: translateX(100%) rotate(45deg);
    }
}

:deep(.el-input-group__append) {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    padding: 0;
}

:deep(.el-input-group__append .el-button) {
    border: none;
    margin: 0;
    background: transparent;
    color: white;
    padding: 0 20px;
    height: 100%;
}

:deep(.el-input-group__append .el-button:hover) {
    background: rgba(255, 255, 255, 0.1);
}

:deep(.el-input__wrapper) {
    box-shadow: 0 4px 15px rgba(74, 158, 92, 0.08);
    width: 100%;
}

:deep(.el-input__inner) {
    height: 40px;
    transition: all 0.3s ease;
}

:deep(.el-input__inner:focus) {
    border-color: #4a9e5c;
    box-shadow: 0 0 8px rgba(74, 158, 92, 0.2);
}

:deep(.el-table) {
    background: transparent;
    border-radius: 12px;
    overflow: hidden;
}

:deep(.el-table__header) {
    background: linear-gradient(90deg, rgba(74, 158, 92, 0.1), rgba(33, 150, 243, 0.1));
}

:deep(.el-table__header-wrapper th) {
    background: transparent;
    color: #2c3e50;
    font-weight: 600;
    border-bottom: 2px solid rgba(74, 158, 92, 0.2);
}

:deep(.el-table__row) {
    background: rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
}

:deep(.el-table__row:hover) {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

:deep(.el-table__cell) {
    border-bottom: 1px solid rgba(74, 158, 92, 0.1);
}

/* 鎸夐挳鏍峰紡 */
:deep(.el-button) {
    border-radius: 6px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

:deep(.el-button--primary) {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
}

:deep(.el-button--primary:hover) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(74, 158, 92, 0.2);
}

/* 鍒嗛〉鏍峰紡 */
.pagination {
    margin-top: 20px;
    padding: 15px;
    display: flex;
    justify-content: flex-end;
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(74, 158, 92, 0.08);
}

/* 瀵硅瘽妗嗘牱寮?*/
:deep(.el-dialog) {
    border-radius: 15px;
    overflow: hidden;
}

:deep(.el-dialog__header) {
    background: linear-gradient(135deg, #f8faff 0%, #f0f2f5 100%);
    padding: 20px;
    margin: 0;
    position: relative;
}

:deep(.el-dialog__header::before) {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
}

/* 鎻忚堪鍒楄〃鏍峰紡 */
:deep(.el-descriptions) {
    padding: 20px;
}

:deep(.el-descriptions__cell) {
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
}

/* 娣诲姞绉戞妧鎰熻楗板厓绱?*/
/* .medical-records::after {
    content: '';
    position: absolute;
    right: -50px;
    bottom: -50px;
    width: 200px;
    height: 200px;
    background: linear-gradient(45deg, rgba(74, 158, 92, 0.05), rgba(33, 150, 243, 0.05));
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    z-index: 0;
} */

/* 鏍囩鏍峰紡 */
:deep(.el-tag) {
    border-radius: 4px;
}

:deep(.el-tag--success) {
    background: linear-gradient(135deg, #4a9e5c 0%, #81C784 100%);
    border: none;
    color: white;
}

:deep(.el-tag--info) {
    background: linear-gradient(135deg, #90A4AE 0%, #B0BEC5 100%);
    border: none;
    color: white;
}

.dialog-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* 娣诲姞鍖哄潡閾惧湴鍧€鏍煎紡鎻愮ず鏍峰紡 */
.form-tip {
    font-size: 12px;
    color: #909399;
    margin-top: 4px;
    line-height: 1.2;
}

/* 鍘婚櫎鍐呭祵琛ㄥ崟椤圭殑杈硅窛 */
.no-margin {
    margin: 0 !important;
}

/* 琛ㄥ崟楠岃瘉鐘舵€佹牱寮?*/
:deep(.el-form-item.is-error .el-input__wrapper) {
    box-shadow: 0 0 0 1px #f56c6c !important;
}

:deep(.el-form-item.is-success .el-input__wrapper) {
    box-shadow: 0 0 0 1px #67c23a !important;
}
</style>
<template>
    <div class="my-medical">

        <h2 class="page-title">鎴戠殑鐥呭巻</h2>
        <div class="search-section">
            <el-input v-model="searchText" placeholder="璇疯緭鍏ョ梾鍘咺D" />
            <el-button type="primary" @click="handleSearch" class="search-btn">鎼滅储鐥呭巻</el-button>
        </div>
        <el-table :data="medicalRecords" border style="width: 100%">
            <el-table-column prop="recordId" label="鐥呭巻ID" width="120" />
            <el-table-column prop="patientName" label="鎮ｈ€呭鍚? width="120" />
            <el-table-column prop="hospitalName" label="鍖婚櫌鍚嶇О" width="180" />
            <el-table-column prop="department" label="绉戝" width="120" />
            <el-table-column prop="doctorName" label="鍖荤敓濮撳悕" width="120" />
            <el-table-column prop="isFilled" label="鐘舵€? width="100">
                <template #default="scope">
                    <el-tag :type="scope.row.isFilled ? 'success' : 'info'">
                        {{ scope.row.isFilled ? '宸插畬鎴? : '鏈畬鎴? }}
                    </el-tag>
                </template>
            </el-table-column>
            <el-table-column prop="createTime" label="鍒涘缓鏃堕棿" width="180" />
            <el-table-column label="鎿嶄綔" width="180">
                <template #default="scope">
                    <el-button type="primary" size="small" @click="viewRecord(scope.row)">鏌ョ湅</el-button>
                </template>
            </el-table-column>
        </el-table>
        <div class="pagination">
            <el-pagination
                v-model:current-page="currentPage"
                v-model:page-size="pageSize"
                :page-sizes="[10, 20, 30, 50]"
                :total="total"
                layout="total, sizes, prev, pager, next"
                @size-change="handleSizeChange"
                @current-change="handleCurrentChange"
            />
        </div>
        <el-dialog v-model="dialogVisible" :title="dialogTitle" width="60%">
            <el-descriptions :column="2" border>
                <el-descriptions-item label="鐥呭巻缂栧彿">
                    <el-input v-model="selectedRecord.recordId" :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鎮ｈ€呭鍚?>
                    <el-input v-model="selectedRecord.patientName" :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鍖婚櫌鍚嶇О">
                    <el-input v-model="selectedRecord.hospitalName" :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="绉戝">
                    <el-input v-model="selectedRecord.department" :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鍖荤敓濮撳悕">
                    <el-input v-model="selectedRecord.doctorName" :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鎸傚彿淇℃伅">
                    <el-input v-model="selectedRecord.registrationInfo" type="textarea" :rows="2"
                        :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鏃㈠線鐥呭彶">
                    <el-input v-model="selectedRecord.pastMedicalHistory" type="textarea" :rows="3"
                        :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鐜扮梾鍙?>
                    <el-input v-model="selectedRecord.currentMedicalHistory" type="textarea" :rows="3"
                        :disabled="viewOnly" />
                </el-descriptions-item>
                <el-descriptions-item label="鐘舵€?>{{ selectedRecord.isFilled ? '宸插畬鎴? : '鏈畬鎴? }}</el-descriptions-item>
            </el-descriptions>
            <template #footer>
                <el-button @click="dialogVisible = false">鍏抽棴</el-button>
            </template>
        </el-dialog>
    </div>
</template>

<script setup lang="ts">
import { ref, onMounted, reactive } from 'vue'
import { getMedicalRecordList, getMedicalRecordByIdentityNumber } from "../../api/medical";

interface MedicalRecord {
    recordId: number;
    patientName: string;
    hospitalName: string;
    department: string;
    doctorName: string;
    pastMedicalHistory: string;
    currentMedicalHistory: string;
    createTime: string;
    isFilled: boolean;
    registrationInfo: string;
}

const searchText = ref('')
const medicalRecords = ref<MedicalRecord[]>([])
const dialogVisible = ref(false)
const dialogTitle = ref('鐥呭巻璇︽儏')
const selectedRecord = reactive({
    recordId: 0,
    patientName: '',
    hospitalName: '',
    department: '',
    doctorName: '',
    pastMedicalHistory: '',
    currentMedicalHistory: '',
    createTime: '',
    isFilled: false,
    registrationInfo: '',
})
const viewOnly = ref(true)
const userId = parseInt(localStorage.getItem('userId') || '0');

// 娣诲姞鍒嗛〉鐩稿叧鐨勫搷搴斿紡鍙橀噺
const currentPage = ref(1)
const pageSize = ref(10)
const total = ref(0)

const formatDateTime = (timestamp: number): string => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleString() !== "Invalid Date" ? date.toLocaleString() : '';
};

const fetchMedicalRecords = async () => {
    try {
        const response = await getMedicalRecordList(userId);
        console.log('鑾峰彇鐥呭巻鍒楄〃鍝嶅簲:', response); // 鏌ョ湅鍝嶅簲缁撴瀯
        if (response) {
            medicalRecords.value = response.map((record: any) => ({
                ...record,
                createTime: formatDateTime(record.createTime)
            }));
            total.value = response.length || 0;
        }
    } catch (error) {
        console.error('鑾峰彇鐥呭巻澶辫触', error);
    }
}

const handleSizeChange = (val: number) => {
    pageSize.value = val;
    fetchMedicalRecords();
}

const handleCurrentChange = (val: number) => {
    currentPage.value = val;
    fetchMedicalRecords();
}

const handleSearch = async () => {
    if (!searchText.value) {
        fetchMedicalRecords();
        return;
    }
    
    try {
        const recordId = parseInt(searchText.value);
        if (isNaN(recordId)) {
            console.error('鐥呭巻ID蹇呴』鏄暟瀛?);
            return;
        }
        
        const response = await getMedicalRecordByIdentityNumber(recordId, userId);
        console.log('鏌ヨ鐥呭巻鍝嶅簲:', response); // 鏌ョ湅鍝嶅簲缁撴瀯

        if (response) {
            // 閲嶇疆閫変腑璁板綍瀵硅薄锛岀‘淇濇病鏈夋棫鏁版嵁
            resetSelectedRecord();
            
            // 鐩存帴璁剧疆灞炴€?
            selectedRecord.recordId = response.recordId;
            selectedRecord.patientName = response.patientName || '鏈煡';
            selectedRecord.doctorName = response.doctorName || '鏈煡';
            selectedRecord.hospitalName = response.hospitalName || '';
            selectedRecord.department = response.department || '';
            selectedRecord.pastMedicalHistory = response.pastMedicalHistory || '';
            selectedRecord.currentMedicalHistory = response.currentMedicalHistory || '';
            selectedRecord.registrationInfo = response.registrationInfo || '';
            selectedRecord.createTime = formatDateTime(response.createTime);
            selectedRecord.isFilled = response.isFilled || false;
            
            // 鏇存柊鍗曟潯鏁版嵁鐨勮鍥?
            medicalRecords.value = [{
                recordId: response.recordId,
                patientName: response.patientName || '鏈煡',
                doctorName: response.doctorName || '鏈煡',
                hospitalName: response.hospitalName || '',
                department: response.department || '',
                pastMedicalHistory: response.pastMedicalHistory || '',
                currentMedicalHistory: response.currentMedicalHistory || '',
                registrationInfo: response.registrationInfo || '',
                createTime: formatDateTime(response.createTime),
                isFilled: response.isFilled || false
            }];
            total.value = 1;
            
            // 璁剧疆瑙嗗浘鐘舵€?
            viewOnly.value = response.isFilled || true;
            dialogTitle.value = '鐥呭巻璇︽儏';
            
            // 鏄剧ず瀵硅瘽妗?
            dialogVisible.value = true;
        } else {
            console.error('鏈壘鍒扮梾鍘嗕俊鎭?);
        }
    } catch (error) {
        console.error('鎼滅储澶辫触', error);
    }
}

// 閲嶇疆閫変腑璁板綍鐨勬柟娉?
const resetSelectedRecord = () => {
    selectedRecord.recordId = 0;
    selectedRecord.patientName = '';
    selectedRecord.hospitalName = '';
    selectedRecord.department = '';
    selectedRecord.doctorName = '';
    selectedRecord.pastMedicalHistory = '';
    selectedRecord.currentMedicalHistory = '';
    selectedRecord.createTime = '';
    selectedRecord.isFilled = false;
    selectedRecord.registrationInfo = '';
};

const viewRecord = (row: MedicalRecord) => {
    // 閲嶇疆閫変腑璁板綍
    resetSelectedRecord();
    
    // 澶嶅埗鏁版嵁
    Object.assign(selectedRecord, row);
    
    // 璁剧疆瑙嗗浘鐘舵€?
    viewOnly.value = row.isFilled;
    dialogTitle.value = '鐥呭巻璇︽儏';
    
    // 鏄剧ず瀵硅瘽妗?
    dialogVisible.value = true;
}

onMounted(() => {
    fetchMedicalRecords()
})
</script>

<style lang="scss" scoped>
.my-medical {
    padding: 20px;
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
    border-radius: 15px;
    position: relative;
    overflow: hidden;
}


.my-medical::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
    border-radius: 3px;
}

.page-title {
    font-size: 24px;
    color: #2c3e50;
    margin-bottom: 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    position: relative;
    padding-left: 15px;
}

.page-title::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 24px;
    background: linear-gradient(180deg, #4a9e5c, #2196F3);
    border-radius: 2px;
}

.search-section {
    margin-bottom: 25px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.8);
    display: flex;
    gap: 15px;
    align-items: center;
}

:deep(.el-input__wrapper) {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05) !important;
    transition: all 0.3s ease;
}

:deep(.el-input__wrapper:hover) {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08) !important;
}

:deep(.el-input__wrapper.is-focus) {
    box-shadow: 0 0 0 1px #4a9e5c !important;
    transform: translateY(-1px);
}

.search-btn {
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
    position: relative;
    overflow: hidden;
}

.search-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(74, 158, 92, 0.3);
}

.search-btn::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

@keyframes shine {
    0% {
        transform: translateX(-100%) rotate(45deg);
    }

    100% {
        transform: translateX(100%) rotate(45deg);
    }
}

:deep(.el-table) {
    background: transparent;
    border-radius: 12px;
    overflow: hidden;
}

:deep(.el-table__header) {
    background: linear-gradient(90deg, rgba(74, 158, 92, 0.1), rgba(33, 150, 243, 0.1));
}

:deep(.el-table__header-wrapper th) {
    background: transparent;
    color: #2c3e50;
    font-weight: 600;
    border-bottom: 2px solid rgba(74, 158, 92, 0.2);
}

:deep(.el-table__row) {
    background: rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
}

:deep(.el-table__row:hover) {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

:deep(.el-table__cell) {
    border-bottom: 1px solid rgba(74, 158, 92, 0.1);
}

:deep(.el-button--primary) {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
}

:deep(.el-tag--info) {
    background: linear-gradient(135deg, #90A4AE 0%, #B0BEC5 100%);
    border: none;
    color: white;
}

.operation-btn {
    padding: 8px 15px;
    border-radius: 6px;
    font-size: 14px;
    transition: all 0.3s ease;
    background: transparent;
    border: 1px solid #4a9e5c;
    color: #4a9e5c;
}

.operation-btn:hover {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    color: white;
    border-color: transparent;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(74, 158, 92, 0.2);
}

:deep(.el-dialog) {
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    background: rgba(255, 255, 255, 0.95);
}

:deep(.el-dialog__header) {
    background: linear-gradient(90deg, rgba(74, 158, 92, 0.1), rgba(33, 150, 243, 0.1));
    padding: 20px;
    margin: 0;
}

:deep(.el-dialog__title) {
    color: #2c3e50;
    font-weight: 600;
    font-size: 18px;
}

:deep(.el-dialog__body) {
    padding: 30px;
}

:deep(.el-dialog__footer) {
    border-top: 1px solid rgba(74, 158, 92, 0.1);
    padding: 15px 20px;
}

.dialog-footer button {
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease;
}

.dialog-footer .confirm-btn {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
}

.dialog-footer .confirm-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(74, 158, 92, 0.3);
}

/* 娣诲姞鍒嗛〉鏍峰紡 */
.pagination {
    margin-top: 20px;
    padding: 15px;
    display: flex;
    justify-content: flex-end;
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(74, 158, 92, 0.08);
}

:deep(.el-pagination) {
    .el-pagination__total {
        margin-right: 16px;
    }
    
    .el-pagination__sizes {
        margin-right: 16px;
    }
    
    .el-pager li {
        background: transparent;
        &.is-active {
            background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
            color: white;
        }
    }
}
</style>
<template>
    <div class="appointment-management">
        
            <h2 class="page-title">鎸傚彿棰勭害</h2>
            <div class="search-section">

                <el-input v-model="appointmentId" placeholder="璇疯緭鍏ユ寕鍙烽绾︾紪鍙? class="search-input">
                    <template #append>
                        <el-button type="primary" @click="handleSearch" class="search-btn">鎼滅储鎸傚彿棰勭害</el-button>
                    </template>
                </el-input>
            </div>
            <el-table :data="tableData" border style="min-width: 100%">
                <el-table-column prop="patientName" label="鎮ｈ€呭鍚? width="120" />
                <!-- <el-table-column prop="patient" label="鎮ｈ€呭湴鍧€" width="120" /> -->
                <el-table-column fixed prop="appointmentId" label="鎸傚彿棰勭害缂栧彿" width="120" />
                <el-table-column prop="hospitalName" label="鍖婚櫌鍚嶇О" width="120" />
                <el-table-column prop="department" label="绉戝" width="120" />
                <el-table-column prop="doctorName" label="鍖荤敓濮撳悕" width="120" />
                <!-- <el-table-column prop="doctor" label="鍖荤敓鍦板潃" width="120" /> -->
                <el-table-column prop="remark" label="澶囨敞" width="120" />
                <el-table-column prop="createTime" label="鎸傚彿棰勭害鏃堕棿" width="120" />
                <el-table-column prop="isCompleted" label="鎸傚彿棰勭害鐘舵€?>
                    <template #default="scope">
                        <el-tag :type="scope.row.isCompleted ? 'success' : 'warning'">
                            {{ scope.row.isCompleted ? '宸插畬鎴? : '鏈畬鎴? }}
                        </el-tag>
                    </template>
                </el-table-column>
                <el-table-column label="鎿嶄綔" width="300">
                    <template #default="{ row }">
                        <el-button type="primary" @click="handleCompleteAppointment(row)">瀹屾垚</el-button>
                        <el-button type="info" @click="EditAppointment(row)">缂栬緫</el-button>
                        <el-button type="danger" @click="handleDeleteAppointment(row)">鍒犻櫎</el-button>
                    </template>
                </el-table-column>
            </el-table>
            <div class="pagination">
                <el-pagination v-model:current-page="currentPage" v-model:page-size="pageSize"
                    :page-sizes="[10, 20, 30, 50]" :total="total" layout="total, sizes, prev, pager, next"
                    @size-change="handleSizeChange" @current-change="handleCurrentChange" />
            </div>
            <el-dialog v-model="dialogVisible" :title="dialogTitle" width="50%">
                <el-descriptions :column="2" border>
                    <el-descriptions-item label="鎸傚彿棰勭害缂栧彿">
                        <el-input v-model="appointmentForm.appointmentId" :disabled="true" />
                    </el-descriptions-item>
                    <el-descriptions-item label="鎮ｈ€呭鍚?>
                        <el-input v-model="appointmentForm.patientName" :disabled="viewOnly"/>
                    </el-descriptions-item>
                    <el-descriptions-item label="鍖荤敓濮撳悕">
                        <el-input v-model="appointmentForm.doctorName" :disabled="viewOnly"/>
                    </el-descriptions-item>
                    <el-descriptions-item label="鍖婚櫌鍚嶇О">
                        <el-input v-model="appointmentForm.hospitalName" :disabled="viewOnly"/>
                    </el-descriptions-item>
                    <el-descriptions-item label="鎸傚彿棰勭害绉戝">
                        <el-input v-model="appointmentForm.department" :disabled="viewOnly"/>
                    </el-descriptions-item>
                    <el-descriptions-item label="鎸傚彿棰勭害鏃堕棿">
                        <el-input v-model="appointmentForm.createTime" :disabled="viewOnly"/>
                    </el-descriptions-item>
                    <el-descriptions-item label="鐘舵€?>{{ appointmentForm.isCompleted ? '宸插畬鎴? : '鏈畬鎴?
                    }}</el-descriptions-item>
                    <el-descriptions-item label="澶囨敞" :span="2">
                        <el-input v-model="appointmentForm.remark" type="textarea" :rows="3" :disabled="viewOnly"/>
                    </el-descriptions-item>
                </el-descriptions>
                <template #footer>
                    <span class="dialog-footer">
                        <el-button @click="dialogVisible = false">鍏抽棴</el-button>
                        <el-button type="primary" @click="saveAppointment">淇濆瓨</el-button>
                    </span>
                </template>
            </el-dialog>
        
    </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { getSickAppointment, getAppointmentsList, completeAppointment, updateAppointment, deleteAppointment } from '../../api/medical'
const dialogVisible = ref(false)
const dialogTitle = ref('鎸傚彿棰勭害璇︽儏')
const viewOnly = ref(true)
const currentPage = ref(1)
const pageSize = ref(10)
const total = ref(0)
const tableData = ref<any[]>([])

const appointmentForm = reactive({
    appointmentId: '',
    patientName: '',
    patient: "",
    doctorName: '',
    doctor: "",
    hospitalName: '',
    department: '',
    remark: '',
    createTime: 0,
    isCompleted: false
})
const appointmentId = ref();

const handleSearch = async () => {
    if (!appointmentId.value) {
        ElMessage.error('璇疯緭鍏ユ寕鍙烽绾︾紪鍙?);
        return;
    }
    try {
        const response = await getSickAppointment(appointmentId.value, parseInt(localStorage.getItem('userId') || '0'));
        if (response.code == 200) {
            appointmentForm.appointmentId = response.appointmentId.toString();
            appointmentForm.patientName = response.patientName;
            appointmentForm.doctorName = response.doctorName;
            appointmentForm.hospitalName = response.hospitalName;
            appointmentForm.department = response.department;
            appointmentForm.createTime = response.createTime;  
            appointmentForm.isCompleted = response.isCompleted;
            appointmentForm.remark = response.remark;
            tableData.value = [response];
            dialogVisible.value = true;
        } else {
            ElMessage.error(response.msg)
        }
    } catch (error) {
        ElMessage.error('鎼滅储澶辫触');
    }
}

const EditAppointment = (row: any) => {
    appointmentForm.appointmentId = row.appointmentId;
    appointmentForm.patient = row.patient;
    appointmentForm.doctor = row.doctor;
    appointmentForm.patientName = row.patientName;
    appointmentForm.appointmentId = row.appointmentId;
    appointmentForm.department = row.department;
    appointmentForm.hospitalName = row.hospitalName;
    appointmentForm.doctorName = row.doctorName;
    appointmentForm.createTime = row.createTime;
    appointmentForm.isCompleted = row.isCompleted;
    appointmentForm.remark = row.remark;
    if (appointmentForm.isCompleted) {
        viewOnly.value = true;
    }
    else{
        viewOnly.value = false;
    }
    dialogVisible.value = true;
}

const saveAppointment = async () => {
    try {
        // 灏嗘棩鏈熷瓧绗︿覆杞崲涓烘椂闂存埑鎴朓SO鏍煎紡
        let appointmentTime: any = appointmentForm.createTime;
        
        // 濡傛灉鏄瓧绗︿覆鏍煎紡涓斾笉鏄疘SO鏍煎紡锛屽垯杞崲涓烘椂闂存埑
        if (typeof appointmentTime === 'string' && appointmentTime.indexOf('T') === -1) {
            const date = new Date(appointmentTime);
            if (!isNaN(date.getTime())) {
                appointmentTime = date.getTime();
            }
        }
        
        const response = await updateAppointment(
            parseInt(appointmentForm.appointmentId),
            appointmentForm.hospitalName,
            appointmentForm.department,
            appointmentForm.remark,
            appointmentTime
        );
        if (response.code === 200){
            ElMessage.success('鎸傚彿棰勭害淇濆瓨鎴愬姛');
        }else{
            ElMessage.error("鎸傚彿棰勭害淇濆瓨澶辫触!")
        }
        dialogVisible.value = false;
        getAppointmentInfoByDoctor();
    } catch (error) {
        ElMessage.error('淇濆瓨鎸傚彿棰勭害澶辫触');
    }
}

const handleSizeChange = (val: number) => {
    pageSize.value = val;
    getAppointmentInfoByDoctor(); // 閲嶆柊鑾峰彇鏁版嵁
}

const handleCurrentChange = (val: number) => {
    currentPage.value = val;
    getAppointmentInfoByDoctor(); // 閲嶆柊鑾峰彇鏁版嵁
}

const handleCompleteAppointment = (row: any) => {
    ElMessageBox.confirm('纭瀹屾垚姝ゆ寕鍙烽绾?', '鎻愮ず', {
        confirmButtonText: '纭畾',
        cancelButtonText: '鍙栨秷',
        type: 'warning'
    }).then(async () => {
        try {
            const response = await completeAppointment(row.appointmentId);
            console.log("瀹屾垚鎸傚彿棰勭害",response);
            ElMessage.success(response.msg || '鎿嶄綔鎴愬姛')
            getAppointmentInfoByDoctor()
        } catch (error) {
            ElMessage.error('鎿嶄綔澶辫触')
        }
    })
}

// const doctor = localStorage.getItem('accountAddress') || '{}';

const formatDateTime = (timestamp: any) => {
    // 澶勭悊鏃犳晥鎴栫┖鍊?    if (!timestamp) {
        return '鏈缃椂闂?;
    }
    
    let dateValue: number;
    
    // 澶勭悊涓嶅悓绫诲瀷鐨勬椂闂存埑
    if (typeof timestamp === 'number') {
        dateValue = timestamp;
    } else if (typeof timestamp === 'string') {
        // 灏濊瘯灏嗗瓧绗︿覆瑙ｆ瀽涓烘暟瀛?        const parsedNum = parseInt(timestamp);
        if (!isNaN(parsedNum)) {
            dateValue = parsedNum;
        } else {
            // 灏濊瘯浣滀负鏃ユ湡瀛楃涓茶В鏋?            dateValue = new Date(timestamp).getTime();
            // 妫€鏌ユ槸鍚︿负鏈夋晥鏃ユ湡
            if (isNaN(dateValue)) {
                return '鏃犳晥鏃堕棿鏍煎紡';
            }
        }
    } else {
        return '鏃犳晥鏃堕棿鏍煎紡';
    }
    
    // 鍏朵綑鏍煎紡鍖栦唬鐮佷繚鎸佷笉鍙?    const date = new Date(dateValue);
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

const handleDeleteAppointment = async (row:any) => {
    ElMessageBox.confirm('纭鍒犻櫎姝ゆ寕鍙烽绾?', '鎻愮ず', {
        confirmButtonText: '纭畾',
        cancelButtonText: '鍙栨秷',
        type: 'warning'
    }).then(async () => {
        try {
            const response = await deleteAppointment(row.appointmentId);
            if(response.code === 200){
                ElMessage.success(response.msg || '鍒犻櫎鎴愬姛')
                getAppointmentInfoByDoctor()
            } else {
                ElMessage.error(response.msg || '鍒犻櫎澶辫触')
            }
        } catch (error) {
            ElMessage.error('鍒犻櫎澶辫触')
        }
    })
}

const getAppointmentInfoByDoctor = async () => {
    try {
        const response = await getAppointmentsList(parseInt(localStorage.getItem('userId') || '0'));
        
        console.log(response);
        const records = response;
        const totalCount = records.length;
        
        const parsedData = records.map((item: any) => {
            // 浼樺厛浣跨敤鍒涘缓鏃堕棿浣滀负鎸傚彿棰勭害鐨勫浐瀹氭椂闂?            const appointmentTime = item.createTime || item.time;
            console.log('Original appointment time:', appointmentTime);
            
            return {
                ...item,
                createTime: formatDateTime(appointmentTime)
            };
        });
        
        tableData.value = parsedData;
        total.value = totalCount;
    } catch (error) {
        ElMessage.error('鑾峰彇鏁版嵁澶辫触');
    }
}

onMounted(() => {
    getAppointmentInfoByDoctor()
})
</script>

<style scoped>
.appointment-management {
    padding: 20px;
    background: linear-gradient(135deg, #ffffff 0%, #f0f7ff 100%);
    border-radius: 15px;
    position: relative;
    overflow: hidden;
    box-shadow: 0 0 30px rgba(33, 150, 243, 0.08);
}


.appointment-management::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
    border-radius: 3px;
}

/* 鎼滅储鍖哄煙鏍峰紡 */
.search-section {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    position: relative;
    border: 1px solid rgba(33, 150, 243, 0.1);
    box-shadow: 0 4px 20px rgba(149, 157, 165, 0.1);
}


.page-title {
    font-size: 24px;
    color: #2c3e50;
    margin-bottom: 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    position: relative;
    padding-left: 15px;
}

.page-title::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 24px;
    background: linear-gradient(180deg, #4a9e5c, #2196F3);
    border-radius: 2px;
}

/* 娣诲姞绉戞妧鎰熻楗扮嚎鏉?*/
/* .search-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 20px;
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, #2196F3, transparent);
}

.search-section::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: 20px;
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, transparent, #2196F3);
} */
.search-label {
    margin-right: 15px;
    font-size: 15px;
    font-weight: 500;
    color: #2c3e50;
    position: relative;
    padding-left: 12px;
}

.search-input {
    display: flex;
    gap: 15px;
    flex: 1;
}


:deep(.el-input__wrapper) {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05) !important;
    transition: all 0.3s ease;
}

:deep(.el-input__wrapper:hover) {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08) !important;
}

:deep(.el-input__wrapper.is-focus) {
    box-shadow: 0 0 0 1px #4a9e5c !important;
    transform: translateY(-1px);
}

.search-btn {
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
    position: relative;
    overflow: hidden;
}

.search-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(74, 158, 92, 0.3);
}

.search-btn::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

@keyframes shine {
    0% {
        transform: translateX(-100%) rotate(45deg);
    }

    100% {
        transform: translateX(100%) rotate(45deg);
    }
}

:deep(.el-input-group__append) {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    padding: 0;
}

:deep(.el-input-group__append .el-button) {
    border: none;
    margin: 0;
    background: transparent;
    color: white;
    padding: 0 20px;
    height: 100%;
}

/* 琛ㄦ牸鏍峰紡 */
:deep(.el-table) {
    background: transparent;
    border-radius: 12px;
    overflow: hidden;
}

:deep(.el-table__header) {
    background: linear-gradient(90deg, rgba(74, 158, 92, 0.1), rgba(33, 150, 243, 0.1));
}

:deep(.el-table__header-wrapper th) {
    background: transparent;
    color: #2c3e50;
    font-weight: 600;
    border-bottom: 2px solid rgba(74, 158, 92, 0.2);
}

:deep(.el-table__row) {
    background: rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
}

:deep(.el-table__row:hover) {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

:deep(.el-table__cell) {
    border-bottom: 1px solid rgba(74, 158, 92, 0.1);
}

/* 鎸夐挳鏍峰紡 */
:deep(.el-button) {
    border-radius: 6px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

:deep(.el-button--primary) {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
}

:deep(.el-tag--info) {
    background: linear-gradient(135deg, #90A4AE 0%, #B0BEC5 100%);
    border: none;
    color: white;
}

/* 鍒嗛〉鏍峰紡 */
.pagination {
    margin-top: 20px;
    padding: 15px;
    display: flex;
    justify-content: flex-end;
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(74, 158, 92, 0.08);
}

/* 瀵硅瘽妗嗘牱寮?*/
:deep(.el-dialog) {
    border-radius: 15px;
    overflow: hidden;
}

:deep(.el-dialog__header) {
    background: linear-gradient(135deg, #f8faff 0%, #f0f2f5 100%);
    padding: 20px;
    margin: 0;
    position: relative;
}

:deep(.el-dialog__header::before) {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
}

/* 鎻忚堪鍒楄〃鏍峰紡 */
:deep(.el-descriptions) {
    padding: 20px;
}

:deep(.el-descriptions__cell) {
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
}

/* 娣诲姞绉戞妧鎰熻楗板厓绱?*/
/* .appointment-management::after {
    content: '';
    position: absolute;
    right: -50px;
    bottom: -50px;
    width: 200px;
    height: 200px;
    background: linear-gradient(45deg, rgba(74, 158, 92, 0.05), rgba(33, 150, 243, 0.05));
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    z-index: 0;
} */

:deep(.el-tag) {
    border-radius: 4px;
}

:deep(.el-tag--success) {
    background: linear-gradient(135deg, #4a9e5c 0%, #81C784 100%);
    border: none;
    color: white;
}

:deep(.el-tag--info) {
    background: linear-gradient(135deg, #90A4AE 0%, #B0BEC5 100%);
    border: none;
    color: white;
}

.dialog-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}
</style>
<template>
    <div class="reserve-info">

        <h2 class="page-title">鎸傚彿棰勭害</h2>
        <div class="search-section">
            <div class="search-input">
                <el-input v-model="searchText" placeholder="璇疯緭鍏ユ寕鍙烽绾︾紪鍙?>
                </el-input>
                <el-button type="primary" @click="handleSearch" class="search-button">鎼滅储鎸傚彿棰勭害</el-button>
                <el-button type="primary" @click="showRegisterDialog" class="search-button">
                    <i class="el-icon-plus"></i> 鎴戣鎸傚彿
                </el-button>
            </div>
        </div>
        <el-table :data="tableData" border style="width: 100%">
            <el-table-column prop="appointmentId" label="鎸傚彿棰勭害缂栧彿" />
            <el-table-column prop="patientName" label="鎮ｈ€呭鍚? />
            <el-table-column prop="createTime" label="鎸傚彿棰勭害鏃堕棿" />
            <el-table-column prop="doctorName" label="鍖荤敓濮撳悕" />
            <el-table-column prop="hospitalName" label="鍖婚櫌鍚嶇О" />
            <el-table-column prop="department" label="鎸傚彿棰勭害绉戝" />
            <el-table-column prop="isCompleted" label="鎸傚彿棰勭害鐘舵€?>
                <template #default="scope">
                    <el-tag :type="scope.row.isCompleted === '宸插畬鎴? ? 'success' : 'warning'">
                        {{ scope.row.isCompleted }}
                    </el-tag>
                </template>
            </el-table-column>
            <el-table-column prop="remark" label="鐥呮儏鎻忚堪" />
            <el-table-column label="鎿嶄綔" fixed="right" width="300">
                <template #default="scope">
                    <el-button type="primary" size="small" @click="showModalDialog(scope.row)">鎸傚彿棰勭害璇︽儏</el-button>
                    <el-button type="danger" size="small" @click="cancelAppointment(scope.row)"
                        :disabled="scope.row.isCompleted === '宸插畬鎴?">鍙栨秷鎸傚彿棰勭害</el-button>
                </template>
            </el-table-column>
        </el-table>

        <div class="pagination-container">
            <el-pagination v-model:current-page="currentPage" v-model:page-size="pageSize" :page-sizes="[10, 15, 20]"
                :total="total" layout="total, sizes, prev, pager, next" @size-change="handleSizeChange"
                @current-change="handleCurrentChange" />
        </div>

        <el-dialog v-model="dialogVisible" title="鎸傚彿棰勭害璇︽儏" width="50%" :before-close="handleClose">
            <div class="appointment-details" v-loading="loading">
                <h2 class="hospital-title">{{ patientInfo.hospitalName }}</h2>
                <h3 class="record-type">鎸傚彿棰勭害淇℃伅鍗?/h3>
                <el-descriptions :column="2" border>
                    <el-descriptions-item label="缂栧彿">{{ patientInfo.appointmentId }}</el-descriptions-item>
                    <el-descriptions-item label="鎮ｈ€呭鍚?>{{ patientInfo.patientName }}</el-descriptions-item>
                    <el-descriptions-item label="鎸傚彿棰勭害鍖荤敓">{{ patientInfo.doctorName }}</el-descriptions-item>
                    <el-descriptions-item label="鍖婚櫌鍚嶇О">{{ patientInfo.hospitalName }}</el-descriptions-item>
                    <el-descriptions-item label="鎸傚彿棰勭害绉戝">{{ patientInfo.department }}</el-descriptions-item>
                    <el-descriptions-item label="鎸傚彿棰勭害鏃堕棿">{{ patientInfo.createTime }}</el-descriptions-item>

                    <el-descriptions-item label="鎸傚彿棰勭害鐘舵€?>{{ patientInfo.isCompleted }}</el-descriptions-item>
                </el-descriptions>

                <el-card class="record-content">
                    <el-descriptions direction="vertical" :column="1" border>
                        <el-descriptions-item label="鐥呮儏鎻忚堪">{{ patientInfo.remark }}</el-descriptions-item>
                    </el-descriptions>
                </el-card>

                <div class="print-time">
                    鎵撳嵃鏃堕棿: {{ new Date().toLocaleDateString() }}
                </div>
            </div>
            <template #footer>
                <span class="dialog-footer">
                    <el-button @click="handleClose">鍏抽棴</el-button>
                    <el-button type="primary" @click="printAppointment">鎵撳嵃鎸傚彿棰勭害鍗?/el-button>
                </span>
            </template>
        </el-dialog>

        <el-dialog v-model="registerDialogVisible" title="鎸傚彿棰勭害" width="60%">
            <el-form :model="formData" :rules="rules" ref="formRef" label-width="120px" class="form-container">
                <el-card class="form-card" shadow="hover">
                    <div class="form-row">
                        <el-form-item label="鍖婚櫌鍚嶇О锛? required prop="hospitalName">
                            <el-autocomplete
                                v-model="formData.hospitalName"
                                :fetch-suggestions="queryHospitals"
                                placeholder="璇疯緭鍏ユ垨閫夋嫨鍖婚櫌"
                                :trigger-on-focus="true"
                                clearable
                                class="form-select"
                                @select="handleHospitalSelect"
                            ></el-autocomplete>
                        </el-form-item>
                        <el-form-item label="鎸傚彿绉戝锛? required prop="department">
                            <el-autocomplete
                                v-model="formData.department"
                                :fetch-suggestions="queryDepartments"
                                placeholder="璇疯緭鍏ユ垨閫夋嫨绉戝"
                                :trigger-on-focus="true"
                                clearable
                                class="form-select"
                                @select="handleDepartmentSelect"
                            ></el-autocomplete>
                        </el-form-item>

                        <el-form-item label="鍖荤敓濮撳悕锛? required prop="doctorName">
                            <el-autocomplete
                                v-model="formData.doctorName"
                                :fetch-suggestions="queryDoctorNames"
                                placeholder="璇疯緭鍏ュ尰鐢熷鍚?
                                :trigger-on-focus="true"
                                clearable
                                class="form-select"
                                @select="handleDoctorSelect"
                                @focus="onDoctorInputFocus"
                            ></el-autocomplete>
                        </el-form-item>
                    </div>

                    <div class="form-row">
                        

                        <el-form-item label="鎸傚彿鏃堕棿锛? required prop="createTime">
                            <el-date-picker v-model="formData.createTime" type="datetime" placeholder="閫夋嫨鏃ユ湡鏃堕棿"
                                class="form-date-picker" :disabled-date="disabledDate" :disabled-time="disabledTime">
                            </el-date-picker>
                        </el-form-item>
                    </div>

                    <div class="form-row">
                        <el-form-item label="鐥呮儏鎻忚堪锛? prop="remark">
                            <el-input v-model="formData.remark" type="textarea" placeholder="璇疯緭鍏ョ梾鎯呮弿杩帮紙閫夊～锛? :rows="3"
                                class="form-textarea">
                            </el-input>
                        </el-form-item>
                    </div>
                </el-card>
            </el-form>
            <template #footer>
                <span class="dialog-footer">
                    <el-button @click="registerDialogVisible = false">鍙栨秷</el-button>
                    <el-button type="primary" @click="handleRegister">纭鎸傚彿</el-button>
                </span>
            </template>
        </el-dialog>

        <el-dialog v-model="confirmDialogVisible" title="鎸傚彿棰勭害淇℃伅纭" width="50%" :before-close="handleConfirmClose">
            <el-descriptions :column="1" border>
                <el-descriptions-item label="鐥呬汉鍦板潃">{{ formData.patientName }}</el-descriptions-item>
                <el-descriptions-item label="鍖婚櫌鍚嶇О">{{ formData.hospitalName }}</el-descriptions-item>
                <el-descriptions-item label="绉戝">{{ formData.department }}</el-descriptions-item>
                <el-descriptions-item label="鍖荤敓">{{ formData.doctorName }}</el-descriptions-item>
                <el-descriptions-item label="鎸傚彿棰勭害鏃堕棿">{{ formData.createTime }}</el-descriptions-item>
                <el-descriptions-item label="鐥呮儏鎻忚堪">{{ formData.remark }}</el-descriptions-item>
            </el-descriptions>
            <template #footer>
                <span class="dialog-footer">
                    <el-button @click="confirmDialogVisible = false">鍙栨秷</el-button>
                    <el-button type="primary" @click="confirmAppointment">纭鎸傚彿棰勭害</el-button>
                </span>
            </template>
        </el-dialog>
    </div>
</template>

<script setup lang="ts">
import { onMounted, reactive, ref } from 'vue';
import { ElMessage, ElMessageBox } from 'element-plus';
import type { FormInstance } from 'element-plus';
import { getSickAppointment, getAppointmentsList, deleteAppointment, createAppointment, getAllDoctorsName } from "../../api/medical";

const searchText = ref('');
const dialogVisible = ref(false);
const registerDialogVisible = ref(false);
const confirmDialogVisible = ref(false);
const currentPage = ref(1);
const pageSize = ref(10);
const total = ref(0);
const loading = ref(false);
const tableData = ref<any[]>([]);
const formRef = ref<FormInstance>();

const userId = parseInt(localStorage.getItem("userId") || "0");
const accountAddress = localStorage.getItem("accountAddress") || "";
const name = localStorage.getItem("name") || "";

// 棰勭害璇︽儏淇℃伅
const patientInfo = reactive({
    patientName: '',
    appointmentId: 0,
    hospitalName: '',
    department: '',
    doctorName: '',
    createTime: '',
    isCompleted: '',
    remark: ''
});

// 鏂板缓棰勭害琛ㄥ崟鏁版嵁
const formData = reactive({
    patientName: name,
    patient: accountAddress,
    doctorName: '',
    doctor: '',
    hospitalName: '',
    department: '',
    createTime: '',
    remark: ''
});

// 琛ㄥ崟楠岃瘉瑙勫垯
const rules = {
    doctorName: [
        { required: true, message: '璇疯緭鍏ュ尰鐢熷鍚?, trigger: 'blur' }
    ],
  
    hospitalName: [
        { required: true, message: '璇疯緭鍏ュ尰闄㈠悕绉?, trigger: 'blur' }
    ],
    department: [
        { required: true, message: '璇烽€夋嫨绉戝', trigger: 'blur' }
    ],
    createTime: [
        { required: true, message: '璇烽€夋嫨鎸傚彿棰勭害鏃堕棿', trigger: 'blur' }
    ],
    remark: [
        { required: true, message: '璇疯緭鍏ョ梾鎯呮弿杩?, trigger: 'blur' }
    ]
};

// 瀛樺偍鎵€鏈夊尰鐢熶俊鎭?
const doctorsList = ref<{doctorId: number, doctorName: string}[]>([]);

// 甯歌鍖婚櫌鍒楄〃
const hospitalOptions = [
    { value: '鍖椾含鍗忓拰鍖婚櫌', label: '鍖椾含鍗忓拰鍖婚櫌' },
    { value: '棣栭兘鍖荤澶у闄勫睘鍖椾含澶╁潧鍖婚櫌', label: '棣栭兘鍖荤澶у闄勫睘鍖椾含澶╁潧鍖婚櫌' },
    { value: '鍖椾含澶у绗竴鍖婚櫌', label: '鍖椾含澶у绗竴鍖婚櫌' },
    { value: '鍖椾含澶у浜烘皯鍖婚櫌', label: '鍖椾含澶у浜烘皯鍖婚櫌' },
    { value: '鍖椾含澶у绗笁鍖婚櫌', label: '鍖椾含澶у绗笁鍖婚櫌' },
    { value: '涓浗鍖诲绉戝闄㈠寳浜崗鍜屽尰闄?, label: '涓浗鍖诲绉戝闄㈠寳浜崗鍜屽尰闄? },
    { value: '涓浗鍖诲绉戝闄㈣偪鐦ゅ尰闄?, label: '涓浗鍖诲绉戝闄㈣偪鐦ゅ尰闄? },
    { value: '棣栭兘鍖荤澶у闄勫睘鍖椾含鍙嬭皧鍖婚櫌', label: '棣栭兘鍖荤澶у闄勫睘鍖椾含鍙嬭皧鍖婚櫌' },
    { value: '棣栭兘鍖荤澶у瀹ｆ鍖婚櫌', label: '棣栭兘鍖荤澶у瀹ｆ鍖婚櫌' },
    { value: '鍖椾含涓尰鑽ぇ瀛︿笢鐩撮棬鍖婚櫌', label: '鍖椾含涓尰鑽ぇ瀛︿笢鐩撮棬鍖婚櫌' },
    { value: '澶嶆棪澶у闄勫睘涓北鍖婚櫌', label: '澶嶆棪澶у闄勫睘涓北鍖婚櫌' },
    { value: '澶嶆棪澶у闄勫睘鍗庡北鍖婚櫌', label: '澶嶆棪澶у闄勫睘鍗庡北鍖婚櫌' },
    { value: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘鐟為噾鍖婚櫌', label: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘鐟為噾鍖婚櫌' },
    { value: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘浠佹祹鍖婚櫌', label: '涓婃捣浜ら€氬ぇ瀛﹀尰瀛﹂櫌闄勫睘浠佹祹鍖婚櫌' },
    { value: '涓北澶у闄勫睘绗竴鍖婚櫌', label: '涓北澶у闄勫睘绗竴鍖婚櫌' },
];

// 鏌ヨ杩囨护鍖婚櫌
const queryHospitals = (queryString: string, callback: (suggestions: any[]) => void) => {
    console.log("鏌ヨ鍖婚櫌锛岃緭鍏ュ瓧绗?", queryString);
    
    // 濡傛灉鏌ヨ瀛楃涓蹭负绌猴紝杩斿洖鎵€鏈夊尰闄?
    if (!queryString) {
        console.log("杩斿洖鎵€鏈夊尰闄?);
        callback(hospitalOptions);
        return;
    }
    
    // 杩囨护鍖婚櫌鍚嶇О锛屾敮鎸佸崟涓瓧绗﹀尮閰?
    const results = hospitalOptions.filter(
        (hospital) => hospital.value.toLowerCase().includes(queryString.toLowerCase())
    );
    
    console.log("杩囨护鍚庣殑鍖婚櫌鏁伴噺:", results.length);
    callback(results);
};

// 閫夋嫨鍖婚櫌澶勭悊
const handleHospitalSelect = (item: any) => {
    formData.hospitalName = item.value;
};

// 绉戝閫夐」鍒楄〃
const departmentOptions = [
    { value: '鍐呯', label: '鍐呯' },
    { value: '澶栫', label: '澶栫' },
    { value: '濡囦骇绉?, label: '濡囦骇绉? },
    { value: '鍎跨', label: '鍎跨' },
    { value: '鐪肩', label: '鐪肩' },
    { value: '鍙ｈ厰绉?, label: '鍙ｈ厰绉? },
    { value: '鑰抽蓟鍠夌', label: '鑰抽蓟鍠夌' },
    { value: '鐨偆绉?, label: '鐨偆绉? },
    { value: '绁炵粡绉?, label: '绁炵粡绉? },
    { value: '绮剧蹇冪悊绉?, label: '绮剧蹇冪悊绉? },
    { value: '鑲跨槫绉?, label: '鑲跨槫绉? },
    { value: '涓尰绉?, label: '涓尰绉? },
    { value: '鎬ヨ瘖绉?, label: '鎬ヨ瘖绉? },
    { value: '妫€楠岀', label: '妫€楠岀' },
    { value: '鏀惧皠绉?, label: '鏀惧皠绉? },
    { value: '楹婚唹绉?, label: '楹婚唹绉? },
    { value: '鏁村舰绉?, label: '鏁村舰绉? },
    { value: '钀ュ吇绉?, label: '钀ュ吇绉? },
    { value: '搴峰绉?, label: '搴峰绉? }
];

// 鏌ヨ杩囨护绉戝
const queryDepartments = (queryString: string, callback: (suggestions: any[]) => void) => {
    console.log("鏌ヨ绉戝锛岃緭鍏ュ瓧绗?", queryString);
    
    // 濡傛灉鏌ヨ瀛楃涓蹭负绌猴紝杩斿洖鎵€鏈夌瀹?
    if (!queryString) {
        console.log("杩斿洖鎵€鏈夌瀹?);
        callback(departmentOptions);
        return;
    }
    
    // 杩囨护绉戝鍚嶇О锛屾敮鎸佸崟涓瓧绗﹀尮閰?
    const results = departmentOptions.filter(
        (dept) => dept.value.toLowerCase().includes(queryString.toLowerCase())
    );
    
    console.log("杩囨护鍚庣殑绉戝鏁伴噺:", results.length);
    callback(results);
};

// 閫夋嫨绉戝澶勭悊
const handleDepartmentSelect = (item: any) => {
    formData.department = item.value;
};

// 鍦ㄨ緭鍏ユ鑾峰緱鐒︾偣鏃朵篃灏濊瘯鍔犺浇鏁版嵁
const onDoctorInputFocus = () => {
    console.log("鍖荤敓杈撳叆妗嗚幏寰楃劍鐐?);
    if (doctorsList.value.length === 0) {
        console.log("灏濊瘯鍔犺浇鍖荤敓鍒楄〃...");
        fetchDoctorNames();
    }
};

// 鑾峰彇鎵€鏈夊尰鐢熷鍚?
const fetchDoctorNames = async () => {
    console.log("寮€濮嬭幏鍙栧尰鐢熷垪琛?..");
    
    // 娣诲姞涓€浜涙祴璇曟暟鎹紝浠ラ槻API鏆傛椂涓嶅伐浣?
    const testDoctors = [
        { doctorId: 1, doctorName: "寮犲尰鐢? },
        { doctorId: 2, doctorName: "鏉庡尰鐢? },
        { doctorId: 3, doctorName: "鐜嬪尰鐢? }
    ];
    
    try {
        const response = await getAllDoctorsName();
        console.log("API杩斿洖鍘熷鏁版嵁:", response);
        
        if (response && Array.isArray(response) && response.length > 0) {
            doctorsList.value = response.map((doctor: any) => ({
                doctorId: doctor.doctorId,
                doctorName: doctor.doctorName
            }));
            console.log('鑾峰彇鍖荤敓鍒楄〃鎴愬姛锛屾暟閲?', doctorsList.value.length);
            return Promise.resolve(response);
        } else {
            console.warn('API鏈繑鍥炴湁鏁堝尰鐢熸暟鎹紝浣跨敤娴嬭瘯鏁版嵁');
            doctorsList.value = testDoctors;
            return Promise.resolve(testDoctors);
        }
    } catch (error) {
        console.error('鑾峰彇鍖荤敓鍒楄〃澶辫触', error);
        console.warn('浣跨敤娴嬭瘯鏁版嵁浠ｆ浛');
        doctorsList.value = testDoctors;
        return Promise.resolve(testDoctors);
    }
};

// 鏌ヨ杩囨护鍖荤敓濮撳悕
const queryDoctorNames = (queryString: string, callback: (suggestions: any[]) => void) => {
    console.log("鏌ヨ鍖荤敓锛屾煡璇㈠瓧绗︿覆:", queryString, "褰撳墠鍒楄〃闀垮害:", doctorsList.value.length);
    
    // 濡傛灉鍒楄〃涓虹┖鎴栭暱搴︿负0锛屼娇鐢ㄦ祴璇曟暟鎹?
    if (!doctorsList.value || doctorsList.value.length === 0) {
        console.log("鍖荤敓鍒楄〃涓虹┖锛屽皾璇曞姞杞?..");
        fetchDoctorNames().then(() => {
            console.log("鍔犺浇鍚庤繃婊ゅ尰鐢?);
            filterDoctors(queryString, callback);
        });
    } else {
        console.log("浣跨敤鐜版湁鍖荤敓鍒楄〃杩囨护");
        filterDoctors(queryString, callback);
    }
};

// 杩囨护鍖荤敓鏁版嵁
const filterDoctors = (queryString: string, callback: (suggestions: any[]) => void) => {
    console.log("杩囨护鍖荤敓锛岃緭鍏ュ瓧绗?", queryString);
    
    // 纭繚鏈夎嚦灏戜竴涓尰鐢熸暟鎹?
    if (!doctorsList.value || doctorsList.value.length === 0) {
        // 濡傛灉娌℃湁鏁版嵁锛岃繑鍥炴祴璇曟暟鎹?
        const testDoctors = [
            { doctorId: 1, doctorName: "寮犲尰鐢? },
            { doctorId: 2, doctorName: "鏉庡尰鐢? },
            { doctorId: 3, doctorName: "鐜嬪尰鐢? }
        ].map(doctor => ({
            value: doctor.doctorName,
            id: doctor.doctorId,
            label: doctor.doctorName
        }));
        console.log("娌℃湁鍖荤敓鏁版嵁锛屼娇鐢ㄦ祴璇曟暟鎹?);
        callback(testDoctors);
        return;
    }
    
    // 濡傛灉鏌ヨ瀛楃涓蹭负绌烘垨鏈畾涔夛紝杩斿洖鎵€鏈夊尰鐢?
    if (!queryString) {
        const allDoctors = doctorsList.value.map(doctor => ({
            value: doctor.doctorName,
            id: doctor.doctorId || 0,
            label: doctor.doctorName
        }));
        console.log("杩斿洖鎵€鏈夊尰鐢?", allDoctors.length);
        callback(allDoctors);
        return;
    }
    
    // 瀵瑰尰鐢熷悕杩涜杩囨护锛屾敮鎸佸崟涓瓧绗︾殑鍖归厤
    const results = doctorsList.value.filter(doctor => {
        if (!doctor || !doctor.doctorName) return false;
        // 瀵瑰尰鐢熷悕杩涜瀛楃鍖归厤锛屽拷鐣ュぇ灏忓啓
        return doctor.doctorName.toLowerCase().includes(queryString.toLowerCase());
    });
    
    console.log("杩囨护鍚庣殑缁撴灉鏁伴噺:", results.length);
    
    // 杞崲涓篴utocomplete鎵€闇€鏍煎紡
    const suggestions = results.map(doctor => ({
        value: doctor.doctorName,
        id: doctor.doctorId || 0,
        label: doctor.doctorName
    }));
    
    console.log("杩斿洖鐨勫尰鐢熷缓璁垪琛?", JSON.stringify(suggestions));
    callback(suggestions);
};

// 閫夋嫨鍖荤敓澶勭悊
const handleDoctorSelect = (item: any) => {
    
    formData.doctorName = item.value;
    console.log('宸查€夋嫨鍖荤敓:', item);
};

// 鏍煎紡鍖栨椂闂存埑涓烘湰鍦版椂闂村瓧绗︿覆
const formatDate = (timestamp: number): string => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleString();
};

const handleRegister = async () => {
    await submitForm();
}
// 鎼滅储棰勭害
const handleSearch = async () => {
    if (!searchText.value) {
        ElMessage.warning('璇疯緭鍏ラ绾D');
        return;
    }
    
    try {
        const appointmentId = parseInt(searchText.value);
        if (isNaN(appointmentId)) {
            ElMessage.error('棰勭害ID蹇呴』鏄暟瀛?);
            return;
        }
        
        const response = await getSickAppointment(appointmentId, userId);
        console.log('鏌ヨ棰勭害鍝嶅簲:', response.code); // 鏌ョ湅鍝嶅簲缁撴瀯
        if (response) {
            patientInfo.patientName = response.patientName;
            patientInfo.appointmentId = response.appointmentId;
            patientInfo.department = response.department;
            patientInfo.hospitalName = response.hospitalName;
            patientInfo.doctorName = response.doctorName;
            patientInfo.createTime = formatDate(response.createTime);
            patientInfo.isCompleted = response.isCompleted ? '宸插畬鎴? : '鏈畬鎴?;
            patientInfo.remark = response.remark;
            dialogVisible.value = true;
        } else {
            ElMessage.error('鏌ヨ澶辫触');
        }
    } catch (error) {
        ElMessage.error('鏌ヨ澶辫触');
    }
};

// 鍒嗛〉澶у皬鍙樺寲澶勭悊
const handleSizeChange = (val: number) => {
    pageSize.value = val;
    getAppointment();
};


// 椤电爜鍙樺寲澶勭悊
const handleCurrentChange = (val: number) => {
    currentPage.value = val;
    getAppointment();
};

// 鏄剧ず棰勭害璇︽儏寮圭獥
const showModalDialog = (row: any) => {
    dialogVisible.value = true;
    loading.value = true;
    Object.assign(patientInfo, row);
    loading.value = false;
};

// 鍙栨秷棰勭害
const cancelAppointment = (row: any) => {
    ElMessageBox.confirm('纭畾瑕佸彇娑堣鎸傚彿棰勭害鍚楋紵', '鎻愮ず', {
        confirmButtonText: '纭畾',
        cancelButtonText: '鍙栨秷',
        type: 'warning'
    }).then(async () => {
        try {
            const response = await deleteAppointment(row.appointmentId);
            console.log('鍙栨秷棰勭害鍝嶅簲:', response); // 鏌ョ湅鍝嶅簲缁撴瀯
            if (response && response.code === 200) {
                ElMessage.success('鍙栨秷鎴愬姛');
                getAppointment();
            } else {
                ElMessage.error('鍙栨秷澶辫触');
            }
        } catch (error) {
            ElMessage.error('鍙栨秷澶辫触');
        }
    });
};

// 鎵撳嵃棰勭害淇℃伅
// 鎵撳嵃棰勭害淇℃伅
const printAppointment = () => {
  // 闅愯棌瀵硅瘽妗嗗唴瀹逛互澶栫殑鍏冪礌
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    ElMessage.error('璇峰厑璁稿脊鍑虹獥鍙ｄ互鎵撳嵃棰勭害鍗?);
    return;
  }
  
  printWindow.document.write(`
    <html>
    <head>
      <title>鎸傚彿棰勭害鍗?/title>
      <style>
        @page { size: A4; margin: 2cm; }
        body { font-family: SimSun, sans-serif; }
        h1 { text-align: center; }
        table { width: 100%; border-collapse: collapse; }
        table, th, td { border: 1px solid black; }
        th, td { padding: 8px; text-align: left; }
        .remark { margin-top: 15px; border: 1px solid black; padding: 10px; }
      </style>
    </head>
    <body>
      <h1>${patientInfo.hospitalName}</h1>
      <h2 style="text-align:center">鎸傚彿棰勭害淇℃伅鍗?/h2>
      <table>
        <tr><th>缂栧彿</th><td>${patientInfo.appointmentId}</td></tr>
        <tr><th>鎮ｈ€呭鍚?/th><td>${patientInfo.patientName}</td></tr>
        <tr><th>鎸傚彿棰勭害鍖荤敓</th><td>${patientInfo.doctorName}</td></tr>
        <tr><th>鍖婚櫌鍚嶇О</th><td>${patientInfo.hospitalName}</td></tr>
        <tr><th>鎸傚彿棰勭害绉戝</th><td>${patientInfo.department}</td></tr>
        <tr><th>鎸傚彿棰勭害鏃堕棿</th><td>${patientInfo.createTime}</td></tr>
        <tr><th>鎸傚彿棰勭害鐘舵€?/th><td>${patientInfo.isCompleted}</td></tr>
      </table>
      <div class="remark">
        <p><b>鐥呮儏鎻忚堪:</b></p>
        <p>${patientInfo.remark || '鏃?}</p>
      </div>
      <p style="text-align:right">鎵撳嵃鏃堕棿: ${new Date().toLocaleString()}</p>
    </body>
    </html>
  `);
  
  printWindow.document.close();
  printWindow.onload = () => {
    printWindow.print();
    setTimeout(() => printWindow.close(), 500);
  };
};

// 鍏抽棴棰勭害璇︽儏寮圭獥
const handleClose = () => {
    dialogVisible.value = false;
    Object.assign(patientInfo, {
        patientName: '',
        appointmentId: 0,
        hospitalName: '',
        department: '',
        doctorName: '',
        createTime: '',
        isCompleted: '',
        remark: ''
    });
};

// 鑾峰彇鎵€鏈夐绾﹀垪琛?
const getAppointment = async () => {
    try {
        const response = await getAppointmentsList(userId);
        if (response) {
            // 鏁版嵁澶勭悊
            const parsedData = response.map((item: any) => ({
                appointmentId: item.appointmentId,
                patientName: item.patientName,
                hospitalName: item.hospitalName,
                department: item.department,
                doctorName: item.doctorName,
                createTime: formatDate(item.createTime),
                isCompleted: item.isCompleted ? '宸插畬鎴? : '鏈畬鎴?,
                remark: item.remark
            }));

            tableData.value = parsedData;
            total.value = parsedData.length;
        }
    } catch (error) {
        console.error('鑾峰彇棰勭害鍒楄〃澶辫触', error);
    }
};

// 鏄剧ず鏂板缓棰勭害寮圭獥
const showRegisterDialog = () => {
    registerDialogVisible.value = true;
};

// 鍏抽棴纭棰勭害寮圭獥
const handleConfirmClose = () => {
    confirmDialogVisible.value = false;
};

// 鎻愪氦棰勭害琛ㄥ崟
const submitForm = async () => {
    if (!formRef.value) return;
    
    await formRef.value.validate((valid) => {
        if (valid) {
            confirmDialogVisible.value = true;
            registerDialogVisible.value = false;
        }
    });
};

// 纭鍒涘缓棰勭害
const confirmAppointment = async () => {
    if (!formRef.value) return;
    
    try {
        // 纭繚鏃ユ湡鏍煎紡姝ｇ‘
        const timestamp = new Date(formData.createTime).getTime();
        
        const response = await createAppointment(
            formData.patientName,
            formData.doctorName,
            formData.hospitalName,
            formData.department,
            formData.remark,
            timestamp
        );
        
        if (response && response.code === 200) {
            ElMessage.success("鎸傚彿棰勭害鎴愬姛");
            confirmDialogVisible.value = false;
            getAppointment(); // 鍒锋柊棰勭害鍒楄〃
        } else {
            ElMessage.error("鎸傚彿棰勭害澶辫触锛?);
        }
    } catch (error) {
        ElMessage.error("鎻愪氦璇锋眰澶辫触");
        console.error(error);
    }
};

const disabledDate = (time: Date) => {
    return time.getTime() < Date.now() - 8.64e7;
};

const disabledTime = (date: Date) => {
    const now = new Date();
    if (date.getDate() === now.getDate() &&
        date.getMonth() === now.getMonth() &&
        date.getFullYear() === now.getFullYear()) {
        return {
            hours: Array.from({ length: now.getHours() }, (_, i) => i),
            minutes: date.getHours() === now.getHours() ? Array.from({ length: now.getMinutes() }, (_, i) => i) : []
        };
    }
    return {
        hours: [],
        minutes: []
    };
};

onMounted(() => {
    getAppointment();
  
});

</script>

<style scoped>
.reserve-info {
    padding: 20px;
    background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
    border-radius: 15px;
    position: relative;
    overflow: hidden;
}

/* 淇敼瑁呴グ鎬ц儗鏅厓绱?*/
.reserve-info::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
    border-radius: 3px;
}



@keyframes gentleFloat {

    0%,
    100% {
        transform: translate(0, 0) rotate(0deg);
    }

    25% {
        transform: translate(10px, -10px) rotate(1deg);
    }

    50% {
        transform: translate(0, -15px) rotate(0deg);
    }

    75% {
        transform: translate(-10px, -5px) rotate(-1deg);
    }
}





.page-title {
    font-size: 24px;
    color: #2c3e50;
    margin-bottom: 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    position: relative;
    padding-left: 15px;
}

.page-title::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 24px;
    background: linear-gradient(180deg, #4a9e5c, #2196F3);
    border-radius: 2px;
}

/* 鎼滅储鍖哄煙鏍峰紡浼樺寲 */
.search-section {
    display: flex;
    align-items: center;
    margin-bottom: 25px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 16px;
    position: relative;
    border: 1px solid rgba(33, 150, 243, 0.1);
    box-shadow: 0 4px 20px rgba(33, 150, 243, 0.05);
    backdrop-filter: blur(10px);
}

/* 绉戞妧鎰熻楗扮嚎鏉?*/
/* .search-section::before,
.search-section::after {
    content: '';
    position: absolute;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg,
        transparent,
        rgba(74, 158, 92, 0.2),
        rgba(33, 150, 243, 0.2),
        transparent
    );
} */

.search-section::before {
    top: 0;
}

.search-section::after {
    bottom: 0;
}

.search-label {
    margin-right: 15px;
    font-size: 15px;
    font-weight: 500;
    color: #2c3e50;
    position: relative;
    padding-left: 12px;
}

.search-label::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 3px;
    height: 16px;
    background: linear-gradient(180deg, #4a9e5c, #2196F3);
    border-radius: 2px;
}

.search-input {
    display: flex;
    gap: 12px;
    flex: 1;
}

:deep(.el-input__wrapper) {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 10px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.03) !important;
    transition: all 0.3s ease;
    border: 1px solid rgba(74, 158, 92, 0.1);
}

:deep(.el-input__wrapper:hover) {
    box-shadow: 0 4px 15px rgba(74, 158, 92, 0.08) !important;
    transform: translateY(-1px);
}

:deep(.el-input__wrapper.is-focus) {
    box-shadow: 0 0 0 1px rgba(74, 158, 92, 0.3) !important;
    border-color: rgba(74, 158, 92, 0.5);
}

/* 鎸夐挳鏍峰紡浼樺寲 */
.el-button {
    border-radius: 10px;
    padding: 12px 24px;
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.el-button--primary {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
}

.el-button--primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(74, 158, 92, 0.2);
}

.el-button--primary::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg,
            transparent,
            rgba(255, 255, 255, 0.1),
            transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

.search-button {
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    border: none;
    color: white;
    position: relative;
    overflow: hidden;
    /* height: 100%; */
}

.search-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(74, 158, 92, 0.3);
    /* height: 100%; */
}

.search-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

@keyframes shine {
    0% {
        transform: translateX(-100%) rotate(45deg);
    }

    100% {
        transform: translateX(100%) rotate(45deg);
    }
}

/* 琛ㄦ牸鏍峰紡浼樺寲 */
:deep(.el-table) {
    background: transparent;
    border-radius: 16px;
    overflow: hidden;
    margin-top: 20px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.03);
}

:deep(.el-table__header) {
    background: linear-gradient(90deg,
            rgba(74, 158, 92, 0.05),
            rgba(33, 150, 243, 0.05));
}

:deep(.el-table__header-wrapper th) {
    background: transparent;
    color: #2c3e50;
    font-weight: 600;
    border-bottom: 2px solid rgba(74, 158, 92, 0.1);
    padding: 16px 0;
}

:deep(.el-table__row) {
    background: rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
}

:deep(.el-table__row:hover) {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
}

:deep(.el-table__cell) {
    border-bottom: 1px solid rgba(74, 158, 92, 0.05);
}

/* 鐘舵€佹爣绛炬牱寮忎紭鍖?*/
:deep(.el-tag) {
    border-radius: 6px;
    padding: 6px 12px;
    font-weight: 500;
    border: none;
}

:deep(.el-tag--success) {
    background: rgba(74, 158, 92, 0.1);
    color: #4a9e5c;
}

:deep(.el-tag--warning) {
    background: rgba(230, 162, 60, 0.1);
    color: #e6a23c;
}

/* 鍒嗛〉鏍峰紡浼樺寲 */
.pagination-container {
    margin-top: 25px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 16px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    border: 1px solid rgba(33, 150, 243, 0.1);
}

:deep(.el-pagination.is-background .el-pager li:not(.is-disabled).is-active) {
    background: linear-gradient(135deg, #4a9e5c 0%, #2196F3 100%);
    color: white;
    font-weight: 600;
}

:deep(.el-pagination.is-background .el-pager li:not(.is-disabled):hover) {
    color: #4a9e5c;
}

/* 瀵硅瘽妗嗘牱寮忎紭鍖?*/
:deep(.el-dialog) {
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    background: rgba(255, 255, 255, 0.95);
}

:deep(.el-dialog__header) {
    background: linear-gradient(90deg,
            rgba(74, 158, 92, 0.05),
            rgba(33, 150, 243, 0.05));
    padding: 20px;
    margin: 0;
    border-bottom: 1px solid rgba(74, 158, 92, 0.1);
}

:deep(.el-dialog__title) {
    color: #2c3e50;
    font-weight: 600;
    font-size: 18px;
    background: linear-gradient(135deg, #4a9e5c, #2196F3);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

:deep(.el-dialog__body) {
    padding: 30px;
}

:deep(.el-dialog__footer) {
    border-top: 1px solid rgba(74, 158, 92, 0.1);
    padding: 15px 20px;
    background: rgba(255, 255, 255, 0.9);
}

/* 鎸傚彿棰勭害璇︽儏鏍峰紡浼樺寲 */
.appointment-details {
    padding: 25px;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 16px;
}

.hospital-title {
    text-align: center;
    font-size: 24px;
    margin-bottom: 15px;
    color: #2c3e50;
    font-weight: 600;
    position: relative;
    padding-bottom: 15px;
}

.hospital-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, #4a9e5c, #2196F3);
    border-radius: 3px;
}

.record-type {
    text-align: center;
    font-size: 20px;
    margin-bottom: 25px;
    color: #606266;
}

.record-content {
    margin: 25px 0;
    border-radius: 12px;
    border: 1px solid rgba(74, 158, 92, 0.1);
}

.print-time {
    text-align: right;
    margin-top: 25px;
    color: #909399;
    font-size: 14px;
}

/* 琛ㄥ崟鏍峰紡浼樺寲 */
.form-container {
    padding: 20px;
}

.form-card {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 16px;
    padding: 25px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.03);
    border: 1px solid rgba(74, 158, 92, 0.1);
}

.form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

:deep(.el-form-item__label) {
    font-weight: 500;
    color: #2c3e50;
}

:deep(.el-date-editor.el-input__wrapper) {
    width: 100%;
}

/* 娣诲姞鍖哄潡閾惧湴鍧€鏍煎紡鎻愮ず鏍峰紡 */
.form-tip {
    font-size: 12px;
    color: #909399;
    margin-top: 4px;
    line-height: 1.2;
}

/* 琛ㄥ崟楠岃瘉鐘舵€佹牱寮?*/
:deep(.el-form-item.is-error .el-input__wrapper) {
    box-shadow: 0 0 0 1px #f56c6c !important;
}

:deep(.el-form-item.is-success .el-input__wrapper) {
    box-shadow: 0 0 0 1px #67c23a !important;
}
</style>
